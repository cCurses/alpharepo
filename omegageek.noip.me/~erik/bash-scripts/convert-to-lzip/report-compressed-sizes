#!/bin/sh

# report-compressed-sizes v2018.02.18

# Copyright (C) 2017 - 2018
# Erik Jan Tromp <alphageek@slackware.com>
# Licensed under the GPL v2

# concept:
# - report member count, uncompressed, compressed sizes of all compressed files
# - member count is 0 for non-lzip compressed files

# 2018-02-18
# - fixed bug where script would fail if no regex matches were found
# - renamed function _show_error to _error_exit
# - minor edits (style, some POSIX compliance)
# 2017-12-31
# - refactored function _parse_parameters (separated setup, parsing, validation)
# - paths with spaces are now fully supported
# - minor edits (style/readability)
# 2017-12-29
# - renamed script from get-compressed-sizes to report-compressed-sizes
# - removed calls to pushd/popd
# 2017-12-28
# - first limited release

function _error_exit() {
  echo "error: $1" >&2
  exit 1
}

function _parse_parameters() {
  while [ $# -gt 0 ]
  do
    case "$1" in
      '-?'|-h) # -? must be '-?' or it matches '-<any single character>'
        _show_help
      ;;
      -*)
        _error_exit "invalid parameter: '$1'"
      ;;
      *)
        PATH_ARRAY+=("${1/%\//}")
      ;;
    esac
    shift
  done
}

function _process_files() {
  echo "processing: $1"
  echo "members   compressed uncompressed file"

  while read FILE
  do
    # there may be no matches. be graceful about it
    if [ -z "$FILE" ]
    then
      echo "no matches found"
      continue
    fi

    # split $FILE into:
    #  file location
    #  file name (less compression extension)
    #  compression extension
    FIL_LOC=${FILE%/*}     # path/to/file.cmp > path/to
    FIL_NAM=${FILE##*/}    # path/to/file.cmp >         file.cmp
    FIL_CMP=${FIL_NAM##*.} #         file.cmp >              cmp
    FIL_NAM=${FIL_NAM%.*}  #         file.cmp >         file

    # note:
    # FILE, FIL_LOC, & FIL_NAM may contain spaces
    # FIL_CMP may not contain spaces

    FIL_CSIZ=$(stat -c %s "$FILE")
    FIL_MEMB=0 # only lzip supports this

    # choose your weapon
    case $FIL_CMP in
      Z)
        DECOMP=compress
        FIL_USIZ=$($DECOMP -dc "$FILE" 2> /dev/null \
        | wc -c)
      ;;
      bz2|tbz)
        DECOMP=bzip2
        FIL_USIZ=$($DECOMP -dc "$FILE" 2> /dev/null \
        | wc -c)
      ;;
      gz|tgz)
        DECOMP=gzip
        # inaccurate for uncompressed sizes greater than 4294967295 bytes
        FIL_USIZ=$($DECOMP -l "$FILE" 2> /dev/null \
        | awk '/%/ {print $2}')
      ;;
      tlz)
        DECOMP=$LZIP
        read -r FIL_MEMB FIL_USIZ \
        <<< $($DECOMP -lv "$FILE" 2> /dev/null \
        | awk '/%/ {print $3,$5}')
        if [ -z $FIL_USIZ ]
        then
          # not lzip format, try lzma
          FIL_MEMB=0 # only lzip supports this
          DECOMP=lzma
          FIL_USIZ=$($DECOMP -dc "$FILE" 2> /dev/null \
          | wc -c)
        fi
      ;;
      lz)
        DECOMP=$LZIP
        read -r FIL_MEMB FIL_USIZ \
        <<< $($DECOMP -lv "$FILE" 2> /dev/null \
        | awk '/%/ {print $3,$5}')
      ;;
      lzma)
        DECOMP=lzma
        FIL_USIZ=$($DECOMP -dc "$FILE" 2> /dev/null \
        | wc -c)
      ;;
      xz|txz)
        DECOMP=xz
        FIL_USIZ=$($DECOMP --robot -l "$FILE" 2> /dev/null \
        | awk '/^file/ {print $5}')
      ;;
      *) # should never be triggered
        _error_exit "unknown file extension: '$FIL_CMP' (check REGEX)"
      ;;
    esac

    # $FILE may or may not be compressed (I'm looking at you, popa3d sources)
    # make it obvious that something's not right
    if [ -z $FIL_USIZ ]
    then
      FIL_USIZ=-1
    fi

    # pretty print the results
    printf "%7d %12d %12d %s\n" $FIL_MEMB $FIL_CSIZ $FIL_USIZ "$FILE"

    # update various stats
    if [ $MAX_CSIZ -lt $FIL_CSIZ ]
    then
      MAX_CSIZ=$FIL_CSIZ
    fi
    if [ $MAX_MEMB -lt $FIL_MEMB ]
    then
      MAX_MEMB=$FIL_MEMB
    fi
    if [ $MAX_USIZ -lt $FIL_USIZ ]
    then
      MAX_USIZ=$FIL_USIZ
    fi
    if [ $MIN_CSIZ -gt $FIL_CSIZ ]
    then
      MIN_CSIZ=$FIL_CSIZ
    fi
    if [ $MIN_MEMB -gt $FIL_MEMB ]
    then
      MIN_MEMB=$FIL_MEMB
    fi
    if [ $MIN_USIZ -gt $FIL_USIZ ]
    then
      MIN_USIZ=$FIL_USIZ
    fi
    TOT_CSIZ=$(($TOT_CSIZ + $FIL_CSIZ))
    TOT_USIZ=$(($TOT_USIZ + $FIL_USIZ))
  done <<< "$(find "$1" -type f -regex $REGEX | sort)"
}

function _show_help() {
  cat << EOF
provide at least 1 parameter: [path to process] [OPTION]

mandatory parameter:
  path(s) to process  #  must be a valid directory
                      #  can be specified multiple times

optional parameters:
  -?|-h               #  show this help text
EOF
  exit 1
}

#+ start here +#

# must have at least 1 parameter (any order)
if [ $# -lt 1 ]
then
  _show_help
fi

# setup
# overkill ftw! (9223372036854775807 = 0x7FFFFFFFFFFFFFFF) (bash maximum)
MAX_CSIZ=0
MAX_MEMB=0
MAX_USIZ=0
MIN_CSIZ=9223372036854775807
MIN_MEMB=9223372036854775807
MIN_USIZ=9223372036854775807
REGEX=".*[.]\(Z\|bz2\|gz\|lz\|lzma\|t[bglx]z\|xz\)"
TOT_CSIZ=0
TOT_USIZ=0

# parameter defaults
declare -a PATH_ARRAY # indexed. keep it simple

_parse_parameters "$@"

# validate path(s)
# be very strict: directories only. anything else fails
for i in ${!PATH_ARRAY[@]}
do
  if [ ! -d "${PATH_ARRAY[$i]}" ] \
  || [ -h "${PATH_ARRAY[$i]}" ]
  then
    _error_exit "invalid directory: '${PATH_ARRAY[$i]}'"
  fi
done

# fall back to lzip if plzip isn't available
LZIP=plzip
which $LZIP &> /dev/null
if [ $? -ne 0 ]
then
  LZIP=lzip
fi

# do we have the commands we need?
for COMMAND in bzip2 compress gzip lzma $LZIP xz
do
  which $COMMAND &> /dev/null
  if [ $? -ne 0 ]
  then
    _error_exit "command not found: '$COMMAND'"
  fi
done

# get to work
for i in "${!PATH_ARRAY[@]}"
do
  _process_files "${PATH_ARRAY[$i]}"
done

# reset minimums if no matches found
if [ $MIN_CSIZ -eq 9223372036854775807 ]
then
  MIN_CSIZ=0
fi
if [ $MIN_MEMB -eq 9223372036854775807 ]
then
  MIN_MEMB=0
fi
if [ $MIN_USIZ -eq 9223372036854775807 ]
then
  MIN_USIZ=0
fi

echo "      member counts (minimum maximum): $MIN_MEMB $MAX_MEMB"
echo "   compressed sizes (minimum maximum): $MIN_CSIZ $MAX_CSIZ"
echo " uncompressed sizes (minimum maximum): $MIN_USIZ $MAX_USIZ"
echo "total sizes (compressed uncompressed): $TOT_CSIZ $TOT_USIZ"

if [ $MIN_USIZ -lt 0 ]
then
  echo "there appears to be a problem with one or more files"
  echo "grep the output for ' -1 ' to discover the problem file(s)"
fi
