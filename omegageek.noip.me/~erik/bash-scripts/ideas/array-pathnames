#!/bin/bash
#+ marker sof +#

#+ setup here +#

# - be explicit for clarity
# - single dimension indexed array
declare -a _ARRAY_HOLDNAMES
declare -a _ARRAY_PATHNAMES

#- setup here -#

#+ function definitions here +#

function _parse_parameters()
{
  # variables:
  # #
  # 1
  # 2
  # @
  # _ARRAY_ELEMENT_HN (counter)
  # _ARRAY_ELEMENT_PN (counter)
  # _ARRAY_HOLDNAMES (single dimension indexed array)
  # _ARRAY_PATHNAMES (single dimension indexed array)

  #+ parameter defaults +#

  unset _ARRAY_HOLDNAMES
  unset _ARRAY_PATHNAMES

  #- parameter defaults -#

  while [[ $# -gt 0 ]]
  do
    case $1 in
      ( -p \
      | --pathname )
        # - ${parameter:offset:length}
        # - "-z string" = true if the length of string is zero
        if [[ ${2:0:1} == - ]] \
        || [[ -z $2 ]]
        then
          echo "pathname not specified"
          exit 1
        else
          # - keep adding paths until another option is specified or until
          #   we've reached the end of the commandline
          # - globs are now supported. refer to bash(1) section
          #   "Pattern Matching" for specifics
          # - (special thanks to dive in OFTC #slackware for sparking the idea
          #   of adding glob support)
          # - ${parameter:offset:length}
          # - "-z string" = true if the length of string is zero
          until [[ ${2:0:1} == - ]] \
          || [[ -z $2 ]]
          do
            # - blindly save what was passed. it will be tested after the loop
            # - (special thanks to dive in OFTC #slackware for the syntax)
            _ARRAY_HOLDNAMES=( "${_ARRAY_HOLDNAMES[@]}" "$2" )
            #_ARRAY_HOLDNAMES=( "${_ARRAY_HOLDNAMES[@]}" $2 ) # nope
            #_ARRAY_HOLDNAMES=( ${_ARRAY_HOLDNAMES[@]} "$2" ) # nope

            #+ new idea for populating the array +#
            _ARRAY_PATHNAMES+=( "$2" )
            #_ARRAY_PATHNAMES+=( $2 ) # nope
            #- new idea for populating the array -#
            shift
          done
        fi
      ;;
      ( -* )
        echo "invalid option \"$1\" specified"
        exit 1
      ;;
      ( * )
        echo "invalid parameter \"$1\" specified"
        exit 1
      ;;
    esac
    shift
  done

  echo "      \${#_ARRAY_HOLDNAMES[@]}: \"${#_ARRAY_HOLDNAMES[@]}\""
  echo "       \${_ARRAY_HOLDNAMES[@]}: \"${_ARRAY_HOLDNAMES[@]}\""
  echo "      \${#_ARRAY_PATHNAMES[@]}: \"${#_ARRAY_PATHNAMES[@]}\""
  echo "       \${_ARRAY_PATHNAMES[@]}: \"${_ARRAY_PATHNAMES[@]}\""
}

#- function definitions here -#

#+ start here +#

_parse_parameters "$@"

echo

_ARRAY_ELEMENT_HN=0
while [[ $_ARRAY_ELEMENT_HN -lt ${#_ARRAY_HOLDNAMES[@]} ]]
do
  echo "       \${_ARRAY_HOLDNAMES[$_ARRAY_ELEMENT_HN]}: \"${_ARRAY_HOLDNAMES[$_ARRAY_ELEMENT_HN]}\""
  # - id++ = variable post-increment
  ((_ARRAY_ELEMENT_HN++))
done

echo

_ARRAY_ELEMENT_PN=0
while [[ $_ARRAY_ELEMENT_PN -lt ${#_ARRAY_PATHNAMES[@]} ]]
do
  echo "       \${_ARRAY_PATHNAMES[$_ARRAY_ELEMENT_PN]}: \"${_ARRAY_PATHNAMES[$_ARRAY_ELEMENT_PN]}\""
  # - id++ = variable post-increment
  ((_ARRAY_ELEMENT_PN++))
done

#- start here -#

#- marker eof -#
exit 0
