#!/bin/bash
#+ marker sof +#

# brightness v2019.11.11

# Copyright (C) 2017 - 2019
# Erik Jan Tromp <alphageek@slackware.com>
# Licensed under the GPL v2

# concept:
# - get/set brightness manually on hardware that supports it

# NOTE:
# - common calculations between scripts "brightness" & "volume"
#+ marker get +# ("function _backlight_types_display")
# _CURRENT_PERCENT=$(( ( $ACTUAL_BRIGHTNESS * 100 + ( $MAX_BRIGHTNESS / 2 ) ) / $MAX_BRIGHTNESS ))
# _PREVIOUS_PERCENT=$(( ( $BRIGHTNESS * 100 + ( $MAX_BRIGHTNESS / 2 ) ) / $MAX_BRIGHTNESS ))
#+ marker set +# ("function _backlight_value_set")
# _NEW_BRIGHTNESS=$_PARAMETER_NUMERIC
# _NEW_BRIGHTNESS=$(( $BRIGHTNESS $_PARAMETER_PLUSMINUS $_PARAMETER_NUMERIC ))
# _NEW_BRIGHTNESS=$(( ( $MAX_BRIGHTNESS * $_PARAMETER_NUMERIC + 50 ) / 100 ))
# _NEW_BRIGHTNESS=$(( $BRIGHTNESS $_PARAMETER_PLUSMINUS ( $MAX_BRIGHTNESS * $_PARAMETER_NUMERIC + 50 ) / 100 ))

# OOPS:
# - changelog order is unpredictable. some series of entries per date are
#   chronologically top-to-bottom while others are bottom-to-top. preferred
#   order is bottom-to-top. this will gradually be fixed when time permits

# 2019-11-11
# - "function _backlight_type_test" changed the following lines:
#  was: _eko_ps "Test progress:" "none. no permission"
#  was: _eko_pv "test progress:" "none. no permission"
#   is: _show_error "no permission"
# - "function _backlight_value_set" added/deleted the following lines:
#  add: else
#  add:   _show_error "no permission"
#  del: && [[ $_NEW_BRIGHTNESS -ne $BRIGHTNESS ]] \
# 2019-10-13
# -  renamed the following functions globally:
#  was: _eko_pS
#  was: _eko_pS_en
#   is: _eko_ps
#   is: _eko_ps_en
# - "functions:/variables:/binaries:/builtins:" listings for each function
#   updated & verified. also updated the "use & abuse" listings based on this
#   information
# - "function _binary_validate" removed
# - comment cleanup throughout the script
# 2019-10-10
# - "function _show_help" reordered the options listed so that "-d, --debug",
#   "-v, --verbose", & "-?, -h, --help" are the last options displayed
# - "function _parse_parameters" reordered the options parsed to match what is
#   displayed in "function _show_help" to simplify maintenance
# - "functions:/variables:/binaries:/builtins:" listings added/appended to
#   each function & in main
# ^ "# builtins:" is to keep track of "echo" &/or "printf" usage. technically
#   speaking, "(none)" is a misnomer as it's only in reference to these 2
#   builtins
# - "function _eko_S_en" removed
# - changed the following lines globally:
#  was: _eko_S_en "      \$_FOO: \"$_FOO\""
#   is: _eko_pS_en \$_FOO: \""$_FOO\""
# ^ there are several in the following form since the left-hand side contains
#   whitespace
#  was: _eko_S_en "      Foo Bar:" \""$_FOO\""
#   is: _eko_pS_en "Foo Bar:" \""$_FOO\""
# - "function _eko_pS_en" added for properly formatted stdout output
# - "function _eko_S" removed
# - changed the following lines globally:
#  was: _eko_S "      \$_FOO: \"$_FOO\""
#   is: _eko_pS \$_FOO: \""$_FOO\""
# ^ there are several in the following form since the left-hand side contains
#   whitespace
#  was: _eko_S "      Foo Bar:" \""$_FOO\""
#   is: _eko_pS "Foo Bar:" \""$_FOO\""
# - "function _eko_pS" added for properly formatted stdout output
# - "function _eko_v_en" removed
# - changed the following lines globally:
#  was: _eko_v_en "      \$_FOO: \"$_FOO\""
#   is: _eko_pv_en \$_FOO: \""$_FOO\""
# ^ there are several in the following form since the left-hand side contains
#   whitespace
#  was: _eko_v_en "      Foo Bar:" \""$_FOO\""
#   is: _eko_pv_en "Foo Bar:" \""$_FOO\""
# - "function _eko_pv_en" added for properly formatted stdout output
# - "function _eko_v" removed
# - changed the following lines globally:
#  was: _eko_v "      \$_FOO: \"$_FOO\""
#   is: _eko_pv \$_FOO: \""$_FOO\""
# ^ there are several in the following form since the left-hand side contains
#   whitespace
#  was: _eko_v "      Foo Bar:" \""$_FOO\""
#   is: _eko_pv "Foo Bar:" \""$_FOO\""
# - "function _eko_pv" added for properly formatted verbose output
# 2019-09-23
# - "function _process_numeric" rewrote how non-numerics are trimmed from raw
#   _PARAMETER_NUMERIC
# 2019-08-30
# - "function _backlight_types_display" updated the calculations for accuracy
#  was: _CURRENT_PERCENT=$(( $ACTUAL_BRIGHTNESS * 100 / $MAX_BRIGHTNESS ))
#  was: _PREVIOUS_PERCENT=$(( $BRIGHTNESS * 100 / $MAX_BRIGHTNESS ))
#   is: _CURRENT_PERCENT=$(( ( $ACTUAL_BRIGHTNESS * 100 + ( $MAX_BRIGHTNESS / 2 ) ) / $MAX_BRIGHTNESS ))
#   is: _PREVIOUS_PERCENT=$(( ( $BRIGHTNESS * 100 + ( $MAX_BRIGHTNESS / 2 ) ) / $MAX_BRIGHTNESS ))
# 2019-08-27
# - "function _process_numeric" unified this function between this script &
#   "volume" to simplify maintenance
# -  renamed the following variables globally:
#  was: _BRIGHTNESS_NUMERIC
#  was: _BRIGHTNESS_PERCENT
#  was: _BRIGHTNESS_PLUSMINUS
#   is: _PARAMETER_NUMERIC
#   is: _PARAMETER_PERCENT
#   is: _PARAMETER_PLUSMINUS
# 2019-08-16
# - moved the large block of assorted notes to the very end of the script for
#   future reference
# - cleanup & improvements including, but not limited to, the following:
# - "function _eko_iod" simplified & improved
# - "function _eko_sd" & companion variable _BOOLEAN_SUBSET_D removed
# - "function _eko_sv" & companion variable _BOOLEAN_SUBSET_V removed
# - "function _parse_parameters" style changes & improvements
# - "function _show_error" output to stderr, not stdout
# - renamed option "-s, --select" to "-b, --backlight" for clarity. related
#   variable _BACKLIGHT_SELECT renamed to _THIS_BACKLIGHT_TYPE
# - additional style changes:
#   (my scripts are already bash specific, so backwards compatibility is not
#   an issue. several ideas are from http://mywiki.wooledge.org/BashFAQ)
#   - naming convention for functions
#   - usage of "[]" vs "[[]]" to evaluate expressions
#   - doublequote variable assignments only when absolutely necessary to avoid
#     typecasting
# - "function _binary_validate" added for "find" (this function might be
#   quietly removed if "-w" tests are sufficient
# 2019-05-16
# - simplified dynamic indentation by using $FUNCNAME array variable
# 2019-05-15
# - added dynamic indentation to #+ foo +# / #- foo -# debugging text in each
#   function
# 2019-04-28
# - added "current percent" & "previous percent" to the long & short reports
# - updated assorted notes regarding rounding values up vs down (truncating)
# 2019-04-24
# - complete rewrite
# 2017-06-10
# - minor code refactoring
# - correctly calculate percentage when setting brightness
# 2017-06-09
# - first limited release

# NOTE: (to all. READ THIS!)
# - when adjusting brightness, this script accepts the following in any order:
#   - numerics (mandatory)
#   - %        (optional)
#   - +/-      (optional)

# NOTE: (to self) (& others, if you're bored. hi there!)
# - look for anything with the following tags: EDIT FIXME IDEA NOTE ORDER TODO
#   TRY
# - use of bash builtins is often (but not always) preferred over shelling out
#   to binaries
# ^ reasons: speed, availability, simplicity, & predictability. fast is always
#   preferred, no need to test if a binary even *exists*, no need to be
#   concerned about changed syntax or output from one release to the next

# NOTE: (builtin/binary/variable/function indentation)
# - 2 spaces, hash, builtin/binary/variable/function name = in function
# - 0 spaces, hash, builtin/binary/variable/function name = in main
# NOTE: (system builtin use & abuse - excluding echo/printf)
  # (none)
# NOTE: (system binary use & abuse)
  # sleep
# NOTE: (system & script variable use & abuse)
# - system variables are always in the form "FOO"
# - script variables are always in the form "_FOO"
# - system variables referenced & modified. necessary & the whole point
  # @
# - system variables referenced but not modified
  # #
  # 1
  # 2
  # @
  # FUNCNAME (single dimension indexed array)
# @
# - system variables referenced but not modified (technically not system
#   *variables*, but they're derived directly from /sys/class/backlight/*/)
  # ACTUAL_BRIGHTNESS (read-only)
  # BRIGHTNESS        (read-write)
  # MAX_BRIGHTNESS    (read-only)
# - ephemeral variables. here today, gone tomorrow (keeping track for myself)
# - better to have too many than too few
  # _ALL_BACKLIGHT_TYPES
  # _BLACKLIST
  # _BOOLEAN_ALL
  # _BOOLEAN_DEBUG
  # _BOOLEAN_LIST
  # _BOOLEAN_QUIET
  # _BOOLEAN_STDOUT
  # _BOOLEAN_TEST
  # _BOOLEAN_VERBOSE
  # _BRIGHTNESS_HOLD
  # _CHAR
  # _CURRENT_PERCENT
  # _DESIRED_BRIGHTNESS
  # _NEW_BRIGHTNESS
  # _OFFSET
  # _ONE_BACKLIGHT_TYPE
  # _PARAMETER_NUMERIC
  # _PARAMETER_PERCENT
  # _PARAMETER_PLUSMINUS
  # _PERCENT_BRIGHTNESS
  # _PLURAL
  # _PREVIOUS_PERCENT
  # _PROGRESS
  # _RAW_NUMERIC
  # _THIS_BACKLIGHT_TYPE
# _BLACKLIST
# _THIS_BACKLIGHT_TYPE
# NOTE: (script function use & abuse)
# - script functions are always in the form "_foo"
  # _backlight_type_select
  # _backlight_type_test
  # _backlight_types_discover
  # _backlight_types_list
  # _backlight_value_set
  # _backlight_values_get
  # _eko_dv
  # _eko_iod
  # _eko_ps
  # _eko_ps_en
  # _eko_pv
  # _eko_pv_en
  # _process_numeric
  # _show_error
  # _show_help
# _backlight_types_blacklist
# _backlight_types_discover
# _backlight_types_display
# _backlight_types_prioritise
# _parse_parameters
# _trap

# NOTE:
# - read from this one. it's accurate regarding the display's current state
# -r--r--r-- /sys/class/backlight/<backlight type>/actual_brightness

# - write to this one. it's accurate regarding the display's previous state
#   (most of the time, anyway. "acpi_video0" (for me) is unpredictable
#   depending on the use (or absence) of "acpi_osi=Linux" as a kernel option)
# -rw-r--r-- /sys/class/backlight/<backlight type>/brightness

# - read from this one. it's accurate regarding the display's maximum state
# -r--r--r-- /sys/class/backlight/<backlight type>/max_brightness

#+ setup here +#

# variables:
# _BLACKLIST

# - as the name suggests. avoid using the following backlight types by default
# - these can be overridden by passing "-b <backlight type>" to the script
# - only really necessary for backlight types that misbehave in a big way
#   (aka: *BOOM* level of misbehave). non-functional types can be safely
#   ignored here
_BLACKLIST="eeepc eeepc-wmi ideapad"

#- setup here -#

#+ function definitions here +#

# ORDER:
# - before calling _parse_parameters, but otherwise alphabetical

# - except this one. 'tis special
function _trap()
{
  _eko_dv ""
  _eko_iod "#+ _trap +#"

  # functions:
  # _eko_dv
  # _eko_iod

  # variables:
  # _BRIGHTNESS_HOLD
  # _ONE_BACKLIGHT_TYPE

  # binaries:
  # (none)

  # builtins:
  # echo

  # - almost certainly being tripped when running --test, so blindly restore
  #   state if possible
  # - "-n string" = true if the length of string is non-zero
  # - "-w file" = true if file exists & is writable
  if [[ -n $_BRIGHTNESS_HOLD ]] \
  && [[ -n $_ONE_BACKLIGHT_TYPE ]] \
  && [[ -w /sys/class/backlight/$_ONE_BACKLIGHT_TYPE/brightness ]]
  then
    echo $_BRIGHTNESS_HOLD >/sys/class/backlight/$_ONE_BACKLIGHT_TYPE/brightness
  fi

  _eko_iod "#- _trap -#"

  exit
}

# - refer to bash(1) section "SHELL BUILTIN COMMANDS" & signal(7) section
#   "Standard signals" for additional details
trap _trap SIGINT SIGTERM

function _backlight_type_select()
{
  _eko_iod "#+ _backlight_type_select +#"

  # functions:
  # _backlight_types_discover
  # _eko_iod
  # _eko_pv
  # _show_error

  # variables:
  # _ALL_BACKLIGHT_TYPES
  # _THIS_BACKLIGHT_TYPE

  # binaries:
  # (none)

  # builtins:
  # (none)

  # - retrieve list of backlight types
  _backlight_types_discover

  if [[ " $_ALL_BACKLIGHT_TYPES " =~ " $_THIS_BACKLIGHT_TYPE " ]]
  then
    _ALL_BACKLIGHT_TYPES=$_THIS_BACKLIGHT_TYPE
  else
    _show_error "invalid backlight type \"$_THIS_BACKLIGHT_TYPE\" specified"
  fi

  # - technically interchangeable at this point. use the latter for clarity
  #_eko_pv \$_ALL_BACKLIGHT_TYPES: \""$_ALL_BACKLIGHT_TYPES\" (selected)"
  _eko_pv \$_THIS_BACKLIGHT_TYPE: \""$_THIS_BACKLIGHT_TYPE\" (selected)"

  _eko_iod "#- _backlight_type_select -#"
}

function _backlight_type_test()
{
  _eko_iod "#+ _backlight_type_test +#"

  # functions:
  # _backlight_values_get
  # _eko_iod
  # _eko_ps
  # _eko_ps_en
  # _eko_pv
  # _eko_pv_en
  # _show_error

  # variables:
  # BRIGHTNESS        (read-write)
  # MAX_BRIGHTNESS    (read-only)
  # _BRIGHTNESS_HOLD
  # _DESIRED_BRIGHTNESS
  # _ONE_BACKLIGHT_TYPE
  # _PERCENT_BRIGHTNESS
  # _PROGRESS

  # binaries:
  # sleep

  # builtins:
  # echo

  # NOTE:
  # - there is no need to check if a supported backlight type exists. pruning
  #   is done in previous functions
  # - keep it super simple for now. blindly assume correctness & existence of:
  #   - /sys/class/backlight/$_ONE_BACKLIGHT_TYPE/brightness
  #   - /sys/class/backlight/$_ONE_BACKLIGHT_TYPE/max_brightness

  # - "-w file" = true if file exists & is writable
  if [[ -w /sys/class/backlight/$_ONE_BACKLIGHT_TYPE/brightness ]]
  then
    # - preserve state
    _backlight_values_get
    _BRIGHTNESS_HOLD=$BRIGHTNESS

    _eko_ps_en "Test progress:" "    "
    _eko_pv_en "test progress:" "    "

    # - calculate numeric suitable for $BRIGHTNESS from $_PERCENT_BRIGHTNESS
    #   (result is $_DESIRED_BRIGHTNESS)
    _PERCENT_BRIGHTNESS=0
    while [[ $_PERCENT_BRIGHTNESS -le 100 ]]
    do
      # NOTE:
      # - the progress dump is incorrectly offset when "-d, --debug" &
      #   "-v, --verbose" are simultaneously specified
      # - status: wontfix
      # - reason: too much work & it's only a formatting issue when debugging

      _PROGRESS="  ${_PERCENT_BRIGHTNESS}%"
      # - ${parameter:offset}
      _eko_ps_en "" "\b\b\b\b${_PROGRESS: -4}"
      _eko_pv_en "" "\b\b\b\b${_PROGRESS: -4}"

      # - "+ 50" & "/ 100" is to handle rounding an integer *up* by .5
      # - "+ 5" & "/ 10" doesn't work. rounds an integer *down* (truncates)
      # - $((expression))
      _DESIRED_BRIGHTNESS=$(( ( $MAX_BRIGHTNESS * $_PERCENT_BRIGHTNESS + 50 ) / 100 ))

      # - set state
      echo $_DESIRED_BRIGHTNESS >/sys/class/backlight/$_ONE_BACKLIGHT_TYPE/brightness

      # - so I can see what's going on
      sleep 0.02s

      # - ((expression))
      # - id++ = variable post-increment
      ((_PERCENT_BRIGHTNESS++))
    done
    _eko_ps "" ""
    _eko_pv "" ""

    # - restore state
    echo $_BRIGHTNESS_HOLD >/sys/class/backlight/$_ONE_BACKLIGHT_TYPE/brightness
  else
    _show_error "no permission"
  fi

  _eko_iod "#- _backlight_type_test -#"
}

function _backlight_types_blacklist()
{
  _eko_iod "#+ _backlight_types_blacklist +#"

  # functions:
  # _backlight_values_get
  # _eko_iod
  # _eko_pv
  # _show_error

  # variables:
  # ACTUAL_BRIGHTNESS (read-only)
  # MAX_BRIGHTNESS    (read-only)
  # _ALL_BACKLIGHT_TYPES
  # _BLACKLIST
  # _ONE_BACKLIGHT_TYPE

  # binaries:
  # (none)

  # builtins:
  # echo

  # - no doublequotes on purpose
  for _ONE_BACKLIGHT_TYPE in $_ALL_BACKLIGHT_TYPES
  do
    # - what we get
    _backlight_values_get

    # - remove from $_ALL_BACKLIGHT_TYPES if blacklisted or out of range
    if [[ " $_BLACKLIST " =~ " $_ONE_BACKLIGHT_TYPE " ]] \
    || [[ $ACTUAL_BRIGHTNESS -lt 0 ]] \
    || [[ $ACTUAL_BRIGHTNESS -gt $MAX_BRIGHTNESS ]]
    then
      # - remove + fancy footwork to clean up whitespace
      # - ${parameter/pattern/string}
      _ALL_BACKLIGHT_TYPES=$(echo ${_ALL_BACKLIGHT_TYPES/$_ONE_BACKLIGHT_TYPE/})
    fi
  done

  # - what we set
  _eko_pv \$_ALL_BACKLIGHT_TYPES: \""$_ALL_BACKLIGHT_TYPES\" (blacklist)"

  # - "-z string" = true if the length of string is zero
  if [[ -z $_ALL_BACKLIGHT_TYPES ]]
  then
    _show_error "no functional backlight types found. override with \"-b <backlight type>\""
  fi

  _eko_iod "#- _backlight_types_blacklist -#"
}

function _backlight_types_discover()
{
  _eko_iod "#+ _backlight_types_discover +#"

  # functions:
  # _eko_iod
  # _eko_pv
  # _show_error

  # variables:
  # _ALL_BACKLIGHT_TYPES

  # binaries:
  # (none)

  # builtins:
  # echo

  # - it could be a custom kernel completely lacking /sys/class/backlight/
  # - "-d file" = true if file exists & is a directory
  if [[ -d /sys/class/backlight/ ]]
  then
    # - avoid "ls" (binary). use "cd" & "echo" (bash builtins)
    _ALL_BACKLIGHT_TYPES=$(cd /sys/class/backlight/ ; echo *)

    # - if there's no backlight, "*" won't match anything so this is necessary
    # - must be "*". bare * doesn't work
    if [[ $_ALL_BACKLIGHT_TYPES == "*" ]]
    then
      unset _ALL_BACKLIGHT_TYPES
    fi
  else
    unset _ALL_BACKLIGHT_TYPES
  fi

  # - "-n string" = true if the length of string is non-zero
  if [[ -n $_ALL_BACKLIGHT_TYPES ]]
  then
    _eko_pv \$_ALL_BACKLIGHT_TYPES: \""$_ALL_BACKLIGHT_TYPES\" (discover)"
  else
    _show_error "backlight not available"
  fi

  _eko_iod "#- _backlight_types_discover -#"
}

function _backlight_types_display()
{
  _eko_iod "#+ _backlight_types_display +#"

  # functions:
  # _backlight_type_test
  # _backlight_value_set
  # _backlight_values_get
  # _eko_iod
  # _eko_ps
  # _eko_ps_en
  # _eko_pv

  # variables:
  # ACTUAL_BRIGHTNESS (read-only)
  # BRIGHTNESS        (read-write)
  # MAX_BRIGHTNESS    (read-only)
  # _ALL_BACKLIGHT_TYPES
  # _BOOLEAN_ALL
  # _BOOLEAN_TEST
  # _CURRENT_PERCENT
  # _ONE_BACKLIGHT_TYPE
  # _PARAMETER_NUMERIC
  # _PREVIOUS_PERCENT

  # binaries:
  # (none)

  # builtins:
  # (none)

  # NOTE:
  # - $_ALL_BACKLIGHT_TYPES may contain one or more entries at this point with
  #   the preferred backlight type at the head of the list
  # - blindly trim the list so only the preferred backlight type remains
  if ! $_BOOLEAN_ALL
  then
    # - ${parameter/pattern/string}
    _ALL_BACKLIGHT_TYPES=${_ALL_BACKLIGHT_TYPES/ */}
  fi

  # - no doublequotes on purpose
  for _ONE_BACKLIGHT_TYPE in $_ALL_BACKLIGHT_TYPES
  do
    # - what we get
    _backlight_values_get

    # NOTE:
    # - "function _backlight_value_set" requires:
    # $_PARAMETER_NUMERIC (output from _process_numeric. definitely set)
    # - "-n string" = true if the length of string is non-zero
    if [[ -n $_PARAMETER_NUMERIC ]]
    then
      #_backlight_value_set $_ONE_BACKLIGHT_TYPE
      _backlight_value_set
    fi

#+ marker get +#

    # NOTE:
    # - these are the same calculations as used in script "volume",
    #   "function _calculate_percent"
    # - somewhat convoluted, but the end result appears to be 100% accurate
    # - specifically, the whole number portions of the following:

    # helium.elements.lan: intel_backlight (0 - 11484)
    # 0%/1%
    # $ echo "( 57 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # .99634273772204806687
    # $ echo "( 58 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 1.00505050505050505050

    # 24%/25%
    # $ echo "( 2813 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 24.99494949494949494949
    # $ echo "( 2814 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 25.00365726227795193312

    # 32%/33%
    # $ echo "( 3732 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 32.99738766980146290491
    # $ echo "( 3733 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 33.00609543712991988854

    # 49%/50%
    # $ echo "( 5684 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 49.99494949494949494949
    # $ echo "( 5685 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 50.00365726227795193312

    # 65%/66%
    # $ echo "( 7522 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 65.99982584465343086032
    # $ echo "( 7523 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 66.00853361198188784395

    # 74%/75%
    # $ echo "( 8555 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 74.99494949494949494949
    # $ echo "( 8556 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 75.00365726227795193312

    # 99%/100%
    # $ echo "( 11426 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 99.99494949494949494949
    # $ echo "( 11427 * 100 + ( 11484 / 2 ) ) / 11484" | bc -l
    # 100.00365726227795193312

    # helium.elements.lan: acpi_video0 (0 - 10)
    # range is too small for meaningful tests
    # carbon.elements.lan: intel_backlight (0 - 125)
    # unavailable for testing
    # carbon.elements.lan: acpi_video0 (0 - 15)
    # unavailable for testing
    # nitrogen.elements.lan: intel_backlight (0 - 937)
    # unavailable for testing

    _CURRENT_PERCENT=$(( ( $ACTUAL_BRIGHTNESS * 100 + ( $MAX_BRIGHTNESS / 2 ) ) / $MAX_BRIGHTNESS ))
    _PREVIOUS_PERCENT=$(( ( $BRIGHTNESS * 100 + ( $MAX_BRIGHTNESS / 2 ) ) / $MAX_BRIGHTNESS ))

    # - what we set
    _eko_ps_en "Backlight type:" "$_ONE_BACKLIGHT_TYPE"
    _eko_ps_en "" " (settings: $ACTUAL_BRIGHTNESS $BRIGHTNESS $MAX_BRIGHTNESS)"
    _eko_ps "" " (${_CURRENT_PERCENT}% ${_PREVIOUS_PERCENT}% 100%)"
    _eko_pv \$_ONE_BACKLIGHT_TYPE: \""$_ONE_BACKLIGHT_TYPE\" (display)"
    _eko_pv \$ACTUAL_BRIGHTNESS: \""$ACTUAL_BRIGHTNESS\""
    _eko_pv \$BRIGHTNESS: \""$BRIGHTNESS\""
    _eko_pv \$MAX_BRIGHTNESS: \""$MAX_BRIGHTNESS\""
    _eko_pv \$_PREVIOUS_PERCENT: \""${_PREVIOUS_PERCENT}%\""
    _eko_pv \$_CURRENT_PERCENT: \""${_CURRENT_PERCENT}%\""

    if $_BOOLEAN_TEST
    then
      _backlight_type_test
    fi
  done

  _eko_iod "#- _backlight_types_display -#"
}

function _backlight_types_list()
{
  _eko_iod "#+ _backlight_types_list +#"

  # functions:
  # _backlight_types_discover
  # _eko_iod
  # _eko_ps

  # variables:
  # _ALL_BACKLIGHT_TYPES
  # _PLURAL

  # binaries:
  # (none)

  # builtins:
  # (none)

  # concept:
  # - show the user absolutely everything that's available

  # - retrieve list of backlight types
  _backlight_types_discover

  # - pointlessly fancy
  if [[ $_ALL_BACKLIGHT_TYPES =~ " " ]]
  then
    _PLURAL=s
  else
    unset _PLURAL
  fi

  _eko_ps "Available backlight type$_PLURAL:" "$_ALL_BACKLIGHT_TYPES"

  _eko_iod "#- _backlight_types_list -#"

  exit 0
}

function _backlight_types_prioritise()
{
  _eko_iod "#+ _backlight_types_prioritise +#"

  # functions:
  # _eko_iod
  # _eko_pv

  # variables:
  # _ALL_BACKLIGHT_TYPES

  # binaries:
  # (none)

  # builtins:
  # echo

  # - since "intel_backlight" permits finer control than other backlight
  #   types, ensure it's first in the list if it exists
  if [[ " $_ALL_BACKLIGHT_TYPES " =~ " intel_backlight " ]]
  then
    # - remove & prepend + fancy footwork to clean up whitespace
    # - ${parameter/pattern/string}
    _ALL_BACKLIGHT_TYPES=$(echo intel_backlight ${_ALL_BACKLIGHT_TYPES/intel_backlight/})

    _eko_pv \$_ALL_BACKLIGHT_TYPES: \""$_ALL_BACKLIGHT_TYPES\" (prioritise)"
  fi

  _eko_iod "#- _backlight_types_prioritise -#"
}

function _backlight_value_set()
{
  _eko_iod "#+ _backlight_value_set +#"

  # functions:
  # _backlight_values_get
  # _eko_iod
  # _eko_pv
  # _show_error

  # variables:
  # BRIGHTNESS        (read-write)
  # MAX_BRIGHTNESS    (read-only)
  # _ONE_BACKLIGHT_TYPE
  # _NEW_BRIGHTNESS
  # _PARAMETER_NUMERIC
  # _PARAMETER_PERCENT
  # _PARAMETER_PLUSMINUS

  # binaries:
  # (none)

  # builtins:
  # echo

#+ marker set +#

  # NOTE:
  # - I vaguely remember seeing some oddities in how both "acpi_video0" &
  #   "intel_backlight" handle changes when blanked vs when not blanked
  # - status: wontfix
  # - reason: who (besides me) even *does* this? also, not possible?

  # goal:
  # - start with *whatever*, finish with something suitable for /sys/
  # - also, quietly do range limiting

  # entry values:
  # - raw numeric: 33 (absolute)
  # - numeric with +/-: 33+ (relative)
  # - numeric with +/-: 33- (relative)
  # - numeric with %: 33% (absolute)
  # - numeric with %/+/-: 33%+ (relative)
  # - numeric with %/+/-: 33%- (relative)

  _eko_pv \$MAX_BRIGHTNESS: \""$MAX_BRIGHTNESS\""
  _eko_pv \$BRIGHTNESS: \""$BRIGHTNESS\""

  # test: 1/4 (correct)
  # - raw numeric: 33 (absolute)

  # $ echo "33" | bc
  # 33
  # $ echo "33" | bc -l
  # 33

  # - "-z string" = true if the length of string is zero
  if [[ -z $_PARAMETER_PERCENT ]] \
  && [[ -z $_PARAMETER_PLUSMINUS ]]
  then
    _eko_pv "raw numeric:" \""$_PARAMETER_NUMERIC\" (absolute)"

    _NEW_BRIGHTNESS=$_PARAMETER_NUMERIC

    _eko_pv \$_NEW_BRIGHTNESS: \""$_NEW_BRIGHTNESS\""
  fi

  # test: 2/4 (correct)
  # - numeric with +/-: 33+ (relative)
  # - numeric with +/-: 33- (relative)
  # - example: 50% + 33
  # - example: 50% - 33

  # helium.elements.lan: intel_backlight (0 - 11484)
  # $ echo "5742 + 33" | bc
  # 5775
  # $ echo "5742 - 33" | bc
  # 5709
  # $ echo "5742 + 33" | bc -l
  # 5775
  # $ echo "5742 - 33" | bc -l
  # 5709

  # helium.elements.lan: acpi_video0 (0 - 10)
  # $ echo "5 + 33" | bc
  # 38 (range limited to 10)
  # $ echo "5 - 33" | bc
  # -28 (range limited to 0)
  # $ echo "5 + 33" | bc -l
  # 38 (range limited to 10)
  # $ echo "5 - 33" | bc -l
  # -28 (range limited to 0)

  # carbon.elements.lan: intel_backlight (0 - 125)
  # $ echo "63 + 33" | bc
  # 96
  # $ echo "63 - 33" | bc
  # 30
  # $ echo "63 + 33" | bc -l
  # 96
  # $ echo "63 - 33" | bc -l
  # 30

  # carbon.elements.lan: acpi_video0 (0 - 15)
  # $ echo "8 + 33" | bc
  # 41 (range limited to 15)
  # $ echo "8 - 33" | bc
  # -25 (range limited to 0)
  # $ echo "8 + 33" | bc -l
  # 41 (range limited to 15)
  # $ echo "8 - 33" | bc -l
  # -25 (range limited to 0)

  # nitrogen.elements.lan: intel_backlight (0 - 937)
  # $ echo "469 + 33" | bc
  # 502
  # $ echo "469 - 33" | bc
  # 436
  # $ echo "469 + 33" | bc -l
  # 502
  # $ echo "469 - 33" | bc -l
  # 436

  # - "-z string" = true if the length of string is zero
  # - "-n string" = true if the length of string is non-zero
  if [[ -z $_PARAMETER_PERCENT ]] \
  && [[ -n $_PARAMETER_PLUSMINUS ]]
  then
    _eko_pv "numeric with +/-:" \""$_PARAMETER_NUMERIC$_PARAMETER_PLUSMINUS\" (relative)"

    # - $((expression))
    _NEW_BRIGHTNESS=$(( $BRIGHTNESS $_PARAMETER_PLUSMINUS $_PARAMETER_NUMERIC ))


    _eko_pv \$_NEW_BRIGHTNESS: \""$_NEW_BRIGHTNESS\""
  fi

  # test: 3/4 (correct)
  # - numeric with %: 33% (absolute)

  # helium.elements.lan: intel_backlight (0 - 11484)
  # $ echo "( 11484 * 33 + 50 ) / 100" | bc
  # 3790
  # $ echo "( 11484 * 33 + 50 ) / 100" | bc -l
  # 3790.22000000000000000000

  # helium.elements.lan: acpi_video0 (0 - 10)
  # $ echo "( 10 * 33 + 50 ) / 100" | bc
  # 3
  # $ echo "( 10 * 33 + 50 ) / 100" | bc -l
  # 3.80000000000000000000

  # carbon.elements.lan: intel_backlight (0 - 125)
  # $ echo "( 125 * 33 + 50 ) / 100" | bc
  # 41
  # $ echo "( 125 * 33 + 50 ) / 100" | bc -l
  # 41.75000000000000000000

  # carbon.elements.lan: acpi_video0 (0 - 15)
  # $ echo "( 15 * 33 + 50 ) / 100" | bc
  # 5
  # $ echo "( 15 * 33 + 50 ) / 100" | bc -l
  # 5.45000000000000000000

  # nitrogen.elements.lan: intel_backlight (0 - 937)
  # $ echo "( 937 * 33 + 50 ) / 100" | bc
  # 309
  # $ echo "( 937 * 33 + 50 ) / 100" | bc -l
  # 309.71000000000000000000

  # - "-n string" = true if the length of string is non-zero
  # - "-z string" = true if the length of string is zero
  if [[ -n $_PARAMETER_PERCENT ]] \
  && [[ -z $_PARAMETER_PLUSMINUS ]]
  then
    _eko_pv "numeric with %:" \""$_PARAMETER_NUMERIC$_PARAMETER_PERCENT\" (absolute)"

    # - "+ 50" & "/ 100" is to handle rounding an integer *up* by .5
    # - "+ 5" & "/ 10" doesn't work. rounds an integer *down* (truncates)
    # - $((expression))
    _NEW_BRIGHTNESS=$(( ( $MAX_BRIGHTNESS * $_PARAMETER_NUMERIC + 50 ) / 100 ))

    _eko_pv \$_NEW_BRIGHTNESS: \""$_NEW_BRIGHTNESS\""
  fi

  # test: 4/4 (correct)
  # - numeric with %/+/-: 33%+ (relative)
  # - numeric with %/+/-: 33%- (relative)
  # - example: 50% + 33%
  # - example: 50% - 33%

  # helium.elements.lan: intel_backlight (0 - 11484)
  # $ echo "5742 + ( 11484 * 33 + 50 ) / 100" | bc
  # 9532
  # $ echo "5742 - ( 11484 * 33 + 50 ) / 100" | bc
  # 1952
  # $ echo "5742 + ( 11484 * 33 + 50 ) / 100" | bc -l
  # 9532.22000000000000000000
  # $ echo "5742 - ( 11484 * 33 + 50 ) / 100" | bc -l
  # 1951.78000000000000000000

  # helium.elements.lan: acpi_video0 (0 - 10)
  # $ echo "5 + ( 10 * 33 + 50 ) / 100" | bc
  # 8
  # $ echo "5 - ( 10 * 33 + 50 ) / 100" | bc
  # 2
  # $ echo "5 + ( 10 * 33 + 50 ) / 100" | bc -l
  # 8.80000000000000000000
  # $ echo "5 - ( 10 * 33 + 50 ) / 100" | bc -l
  # 1.20000000000000000000

  # carbon.elements.lan: intel_backlight (0 - 125)
  # $ echo "63 + ( 125 * 33 + 50 ) / 100" | bc
  # 104
  # $ echo "63 - ( 125 * 33 + 50 ) / 100" | bc
  # 22
  # $ echo "63 + ( 125 * 33 + 50 ) / 100" | bc -l
  # 104.75000000000000000000
  # $ echo "63 - ( 125 * 33 + 50 ) / 100" | bc -l
  # 21.25000000000000000000

  # carbon.elements.lan: acpi_video0 (0 - 15)
  # $ echo "8 + ( 15 * 33 + 50 ) / 100" | bc
  # 13
  # $ echo "8 - ( 15 * 33 + 50 ) / 100" | bc
  # 3
  # $ echo "8 + ( 15 * 33 + 50 ) / 100" | bc -l
  # 13.45000000000000000000
  # $ echo "8 - ( 15 * 33 + 50 ) / 100" | bc -l
  # 2.55000000000000000000

  # nitrogen.elements.lan: intel_backlight (0 - 937)
  # $ echo "469 + ( 937 * 33 + 50 ) / 100" | bc
  # 778
  # $ echo "469 - ( 937 * 33 + 50 ) / 100" | bc
  # 160
  # $ echo "469 + ( 937 * 33 + 50 ) / 100" | bc -l
  # 778.71000000000000000000
  # $ echo "469 - ( 937 * 33 + 50 ) / 100" | bc -l
  # 159.29000000000000000000

  # - "-n string" = true if the length of string is non-zero
  if [[ -n $_PARAMETER_PERCENT ]] \
  && [[ -n $_PARAMETER_PLUSMINUS ]]
  then
    _eko_pv "numeric with %/+/-:" \""$_PARAMETER_NUMERIC$_PARAMETER_PERCENT$_PARAMETER_PLUSMINUS\" (relative)"

    # - "+ 50" & "/ 100" is to handle rounding an integer *up* by .5
    # - "+ 5" & "/ 10" doesn't work. rounds an integer *down* (truncates)
    # - $((expression))
    _NEW_BRIGHTNESS=$(( $BRIGHTNESS $_PARAMETER_PLUSMINUS ( $MAX_BRIGHTNESS * $_PARAMETER_NUMERIC + 50 ) / 100 ))


    _eko_pv \$_NEW_BRIGHTNESS: \""$_NEW_BRIGHTNESS\""
  fi

  if [[ $_NEW_BRIGHTNESS -lt 0 ]]
  then
    _NEW_BRIGHTNESS=0
    _eko_pv \$_NEW_BRIGHTNESS: \""$_NEW_BRIGHTNESS\" (range limited: minimum)"
  fi

  if [[ $_NEW_BRIGHTNESS -gt $MAX_BRIGHTNESS ]]
  then
    _NEW_BRIGHTNESS=$MAX_BRIGHTNESS
    _eko_pv \$_NEW_BRIGHTNESS: \""$_NEW_BRIGHTNESS\" (range limited: maximum)"
  fi

  # - "-n string" = true if the length of string is non-zero
  # - "-w file" = true if file exists & is writable
  if [[ -n $_ONE_BACKLIGHT_TYPE ]] \
  && [[ -n $_NEW_BRIGHTNESS ]] \
  && [[ -w /sys/class/backlight/$_ONE_BACKLIGHT_TYPE/brightness ]]
  then
    echo $_NEW_BRIGHTNESS >/sys/class/backlight/$_ONE_BACKLIGHT_TYPE/brightness

    # - get new settings
    _backlight_values_get
  else
    _show_error "no permission"
  fi

  _eko_iod "#- _backlight_value_set -#"
}

function _backlight_values_get()
{
  _eko_iod "#+ _backlight_values_get +#"

  # functions:
  # _eko_iod

  # variables:
  # ACTUAL_BRIGHTNESS (read-only)
  # BRIGHTNESS        (read-write)
  # MAX_BRIGHTNESS    (read-only)
  # _ONE_BACKLIGHT_TYPE

  # binaries:
  # (none)

  # builtins:
  # (none)

  # - what we get
  ACTUAL_BRIGHTNESS=$(< /sys/class/backlight/$_ONE_BACKLIGHT_TYPE/actual_brightness)
  BRIGHTNESS=$(< /sys/class/backlight/$_ONE_BACKLIGHT_TYPE/brightness)
  MAX_BRIGHTNESS=$(< /sys/class/backlight/$_ONE_BACKLIGHT_TYPE/max_brightness)

  _eko_iod "#- _backlight_values_get -#"
}

function _eko_dv()
{
  #+ _eko_dv +#

  # functions:
  # (none)

  # variables:
  # @
  # _BOOLEAN_DEBUG
  # _BOOLEAN_VERBOSE

  # binaries:
  # (none)

  # builtins:
  # echo

  if $_BOOLEAN_DEBUG \
  || $_BOOLEAN_VERBOSE
  then
    echo "$@"
  fi

  #- _eko_dv -#
}

function _eko_iod()
{
  #+ _eko_iod +#

  # functions:
  # (none)

  # variables:
  # #
  # @
  # FUNCNAME (single dimension indexed array)
  # _BOOLEAN_DEBUG

  # binaries:
  # (none)

  # builtins:
  # echo
  # printf

  # NOTE:
  # - why "$(( ${#FUNCNAME[@]} - 3 ))"? to account for main, parent, current
  # - pay special attention to the "*" in "%*s". it's part of the magic

  if $_BOOLEAN_DEBUG
  then
    # - fast & fancy indenting/"outdenting"
    # - $((expression))
    # - ${#parameter}
    printf "%*s" $(( ${#FUNCNAME[@]} - 3 ))
    echo "$@"
  fi

  #- _eko_iod -#
}

function _eko_ps()
{
  #+ _eko_ps +#

  # functions:
  # (none)

  # variables:
  # 1
  # @
  # _BOOLEAN_STDOUT

  # binaries:
  # (none)

  # builtins:
  # echo
  # printf

  # NOTE:
  # - why "%26s "? to simplify setting column width in stdout reports. a
  #   single change here affects the output globally
  # - unformatted (non-columnized) output is now supported. simply pass "" as
  #   the first parameter

  if $_BOOLEAN_STDOUT
  then
    # - "-n string" = true if the length of string is non-zero
    if [[ -n $1 ]]
    then
      printf "%26s " "$1"
    fi
    shift
    echo "$@"
  fi

  #- _eko_ps -#
}

function _eko_ps_en()
{
  #+ _eko_ps_en +#

  # functions:
  # (none)

  # variables:
  # 1
  # @
  # _BOOLEAN_STDOUT

  # binaries:
  # (none)

  # builtins:
  # echo
  # printf

  # NOTE:
  # - why "%26s "? to simplify setting column width in stdout reports. a
  #   single change here affects the output globally
  # - unformatted (non-columnized) output is now supported. simply pass "" as
  #   the first parameter

  if $_BOOLEAN_STDOUT
  then
    # - "-n string" = true if the length of string is non-zero
    if [[ -n $1 ]]
    then
      printf "%26s " "$1"
    fi
    shift
    echo -en "$@"
  fi

  #- _eko_ps_en -#
}

function _eko_pv()
{
  #+ _eko_pv +#

  # functions:
  # (none)

  # variables:
  # 1
  # @
  # _BOOLEAN_VERBOSE

  # binaries:
  # (none)

  # builtins:
  # echo
  # printf

  # NOTE:
  # - why "%24s "? to simplify setting column width in verbose reports. a
  #   single change here affects the output globally
  # - unformatted (non-columnized) output is now supported. simply pass "" as
  #   the first parameter

  if $_BOOLEAN_VERBOSE
  then
    # - "-n string" = true if the length of string is non-zero
    if [[ -n $1 ]]
    then
      printf "%24s " "$1"
    fi
    shift
    echo "$@"
  fi

  #- _eko_pv -#
}

function _eko_pv_en()
{
  #+ _eko_pv_en +#

  # functions:
  # (none)

  # variables:
  # 1
  # @
  # _BOOLEAN_VERBOSE

  # binaries:
  # (none)

  # builtins:
  # echo
  # printf

  # NOTE:
  # - why "%24s "? to simplify setting column width in verbose reports. a
  #   single change here affects the output globally
  # - unformatted (non-columnized) output is now supported. simply pass "" as
  #   the first parameter

  if $_BOOLEAN_VERBOSE
  then
    # - "-n string" = true if the length of string is non-zero
    if [[ -n $1 ]]
    then
      printf "%24s " "$1"
    fi
    shift
    echo -en "$@"
  fi

  #- _eko_pv_en -#
}

function _parse_parameters()
{
  #+ _parse_parameters +#

  # functions:
  # _backlight_type_select
  # _backlight_types_list
  # _eko_iod
  # _eko_pv
  # _process_numeric
  # _show_error
  # _show_help

  # variables:
  # #
  # 1
  # 2
  # _BOOLEAN_ALL
  # _BOOLEAN_DEBUG
  # _BOOLEAN_LIST
  # _BOOLEAN_QUIET
  # _BOOLEAN_STDOUT
  # _BOOLEAN_TEST
  # _BOOLEAN_VERBOSE
  # _RAW_NUMERIC
  # _THIS_BACKLIGHT_TYPE

  # binaries:
  # (none)

  # builtins:
  # (none)

  # NOTE:
  # - boolean variables are proper toggles

  # NOTE:
  # - _BOOLEAN_QUIET
  # - _BOOLEAN_STDOUT
  # ^ are special. they're quite simple to set up initially

  # - _BOOLEAN_QUIET
  # - companion functions: none
  # - default: false
  # - toggled in while/do/done loop like the others
  # - option "-q, --quiet"
  # - immediately *after* the while/do/done loop if $_BOOLEAN_QUIET is true,
  #   sets _BOOLEAN_DEBUG, _BOOLEAN_LIST, _BOOLEAN_STDOUT, & _BOOLEAN_VERBOSE
  #   to false

  # - _BOOLEAN_STDOUT
  # - companion functions: _eko_ps/_eko_ps_en
  # - default: true
  # - *not* toggled in while/do/done loop like the others
  # - immediately *after* the while/do/done loop _BOOLEAN_STDOUT is set to
  #   false if either $_BOOLEAN_DEBUG or $_BOOLEAN_VERBOSE are true

  #+ parameter defaults +#

  _BOOLEAN_ALL=false     # action
  _BOOLEAN_DEBUG=false   # display
  _BOOLEAN_LIST=false    # display
  _BOOLEAN_QUIET=false   # display
  _BOOLEAN_STDOUT=true   # display
  _BOOLEAN_TEST=false    # action
  _BOOLEAN_VERBOSE=false # display
  unset _RAW_NUMERIC
  unset _THIS_BACKLIGHT_TYPE

  #- parameter defaults -#

  while [[ $# -gt 0 ]]
  do
    case $1 in
      ( -a \
      | --all )
        if $_BOOLEAN_ALL
        then
          _BOOLEAN_ALL=false
        else
          _BOOLEAN_ALL=true
        fi
      ;;
      ( -b \
      | --backlight )
        # - ${parameter:offset:length}
        # - "-z string" = true if the length of string is zero
        if [[ ${2:0:1} == - ]] \
        || [[ -z $2 ]]
        then
          _show_error "backlight type not specified"
        else
          _THIS_BACKLIGHT_TYPE=$2
        fi
        shift
      ;;
      ( -l \
      | --list )
        if $_BOOLEAN_LIST
        then
          _BOOLEAN_LIST=false
        else
          _BOOLEAN_LIST=true
        fi
      ;;
      ( -q \
      | --quiet )
        if $_BOOLEAN_QUIET
        then
          _BOOLEAN_QUIET=false
        else
          _BOOLEAN_QUIET=true
        fi
      ;;
      ( -t \
      | --test )
        if $_BOOLEAN_TEST
        then
          _BOOLEAN_TEST=false
        else
          _BOOLEAN_TEST=true
        fi
      ;;
      ( *[0-9]* )
        _RAW_NUMERIC=$1
      ;;
      ( -d \
      | --debug )
        if $_BOOLEAN_DEBUG
        then
          _BOOLEAN_DEBUG=false
        else
          _BOOLEAN_DEBUG=true
        fi
      ;;
      ( -v \
      | --verbose )
        if $_BOOLEAN_VERBOSE
        then
          _BOOLEAN_VERBOSE=false
        else
          _BOOLEAN_VERBOSE=true
        fi
      ;;
      ( "-?" \
      | -h \
      | --help ) # -? must be "-?" or it matches "-<any single character>"
        _show_help
      ;;
      ( -* )
        _show_error "invalid option \"$1\" specified"
      ;;
      ( * )
        _show_error "invalid parameter \"$1\" specified"
      ;;
    esac
    shift
  done

  #- _parse_parameters -#

  # - technically in the wrong spot, but it's a chicken or egg scenario
  _eko_iod "#+ _parse_parameters +#"

  #+ parameter settings (in (mostly) proper order of operation) +#

  # NOTE:
  # - the following blocks are *very* sensitive to order of operations

  if $_BOOLEAN_DEBUG \
  || $_BOOLEAN_VERBOSE
  then
    _BOOLEAN_STDOUT=false  # display
  fi

  _eko_pv \$_BOOLEAN_ALL: \""$_BOOLEAN_ALL\""
  _eko_pv \$_BOOLEAN_DEBUG: \""$_BOOLEAN_DEBUG\""
  _eko_pv \$_BOOLEAN_LIST: \""$_BOOLEAN_LIST\""
  _eko_pv \$_BOOLEAN_QUIET: \""$_BOOLEAN_QUIET\""
  _eko_pv \$_BOOLEAN_STDOUT: \""$_BOOLEAN_STDOUT\""
  _eko_pv \$_BOOLEAN_TEST: \""$_BOOLEAN_TEST\""
  _eko_pv \$_BOOLEAN_VERBOSE: \""$_BOOLEAN_VERBOSE\""
  _eko_pv \$_RAW_NUMERIC: \""$_RAW_NUMERIC\""
  _eko_pv \$_THIS_BACKLIGHT_TYPE: \""$_THIS_BACKLIGHT_TYPE\""

  if $_BOOLEAN_QUIET
  then
    #_BOOLEAN_ALL=false     # action
    _BOOLEAN_DEBUG=false   # display
    _BOOLEAN_LIST=false    # display
    _BOOLEAN_QUIET=false   # display
    _BOOLEAN_STDOUT=false  # display
    #_BOOLEAN_TEST=false    # action
    _BOOLEAN_VERBOSE=false # display
  fi

  if $_BOOLEAN_LIST
  then
    _backlight_types_list
  fi

  # - "-n string" = true if the length of string is non-zero
  if [[ -n $_THIS_BACKLIGHT_TYPE ]]
  then
    #_backlight_type_select $_THIS_BACKLIGHT_TYPE
    _backlight_type_select
  fi

  # - "-n string" = true if the length of string is non-zero
  if [[ -n $_RAW_NUMERIC ]]
  then
    #_process_numeric $_RAW_NUMERIC
    _process_numeric
  fi

  #- parameter settings (in (mostly) proper order of operation) -#

  _eko_iod "#- _parse_parameters -#"
}

function _process_numeric()
{
  _eko_iod "#+ _process_numeric +#"

  # functions:
  # _eko_iod
  # _eko_pv
  # _show_error

  # variables:
  # #
  # _CHAR
  # _OFFSET
  # _PARAMETER_NUMERIC
  # _PARAMETER_PERCENT
  # _PARAMETER_PLUSMINUS
  # _RAW_NUMERIC

  # binaries:
  # (none)

  # builtins:
  # (none)

  #+ marker testing +#
  # interesting tidbit:
  # - in "function _parse_parameters":
  # - call "_process_numeric $_RAW_NUMERIC" = both variables can be referenced
  # - call "_process_numeric" = only _RAW_NUMERIC can be referenced

#  _eko_pv "" ""
#  _eko_pv \$@: \""$@\""
#  _eko_pv \$_RAW_NUMERIC: \""$_RAW_NUMERIC\""
#  _eko_pv "" ""
  #- marker testing -#

  # NOTE:
  # - to even *get* to this routine, at least one numeric is present

  # - we start with this
  _PARAMETER_NUMERIC=$_RAW_NUMERIC

  _eko_pv \$_PARAMETER_NUMERIC: \""$_PARAMETER_NUMERIC\" (raw)"

  # - trim all non-numerics from both ends, starting with the left

  # - single character from the left
#  _eko_pv "" ${_PARAMETER_NUMERIC:0:1}
  # - what remains
#  _eko_pv "" ${_PARAMETER_NUMERIC:1}

  # - ${parameter:offset:length}
  while [[ ${_PARAMETER_NUMERIC:0:1} != [0-9] ]]
  do
    # - ${parameter:offset}
    _PARAMETER_NUMERIC=${_PARAMETER_NUMERIC:1}
  done
  _eko_pv \$_PARAMETER_NUMERIC: \""$_PARAMETER_NUMERIC\" (trim left)"

  # - trim all non-numerics from both ends, & then the right

  # - single character from the right
#  _eko_pv "" ${_PARAMETER_NUMERIC: -1:1} # (the space *must* be present)
  # - what remains
#  _eko_pv "" ${_PARAMETER_NUMERIC:0: -1} # (the space *must* be present)

  # - ${parameter:offset:length}
  while [[ ${_PARAMETER_NUMERIC: -1:1} != [0-9] ]] # (the space *must* be present)
  do
    # - ${parameter:offset:length}
    _PARAMETER_NUMERIC=${_PARAMETER_NUMERIC:0: -1} # (the space *must* be present)
  done
  _eko_pv \$_PARAMETER_NUMERIC: \""$_PARAMETER_NUMERIC\" (trim right)"

  # - validate what remains
  # - if there are non-numerics *within* $_PARAMETER_NUMERIC, that's a fail
  if [[ $_PARAMETER_NUMERIC =~ ^[0-9]+$ ]]
  then
    _eko_pv status: pass
  else
    _eko_pv status: fail
    _show_error "invalid parameter \"$_PARAMETER_NUMERIC\" specified"
  fi

  # - we've made it this far. scan $_RAW_NUMERIC looking for any of
  #   "%+-0123456789" to build all 3 _PARAMETER_* below from scratch
  # - anything else is an error
  _OFFSET=0
  unset _PARAMETER_NUMERIC
  unset _PARAMETER_PERCENT
  unset _PARAMETER_PLUSMINUS
  # - ${#parameter}
  while [[ $_OFFSET -lt ${#_RAW_NUMERIC} ]]
  do
    # - ${parameter:offset:length}
    _CHAR=${_RAW_NUMERIC:$_OFFSET:1}

    if [[ $_CHAR == % ]]
    then
      _PARAMETER_PERCENT=$_CHAR
    elif [[ $_CHAR == [+-] ]]
    then
      _PARAMETER_PLUSMINUS=$_CHAR
    elif [[ $_CHAR == [0-9] ]]
    then
      _PARAMETER_NUMERIC+=$_CHAR
    else
      _show_error "invalid character \"$_CHAR\" in \"$_RAW_NUMERIC\" specified"
    fi

    # - ((expression))
    # - id++ = variable post-increment
    ((_OFFSET++))
  done

  # - we finish with this
  # - numerics (mandatory), percent (if present), plus/minus (if present) all
  #   tucked safely away in separate variables for later use
  _eko_pv \$_PARAMETER_NUMERIC: \""$_PARAMETER_NUMERIC\" (finished)"
  _eko_pv \$_PARAMETER_PERCENT: \""$_PARAMETER_PERCENT\" (finished)"
  _eko_pv \$_PARAMETER_PLUSMINUS: \""$_PARAMETER_PLUSMINUS\" (finished)"
  _eko_pv example: \""$_PARAMETER_NUMERIC$_PARAMETER_PERCENT$_PARAMETER_PLUSMINUS\""

  _eko_iod "#- _process_numeric -#"
}

function _show_error()
{
  _eko_iod "#+ _show_error +#"

  # functions:
  # _eko_iod

  # variables:
  # @

  # binaries:
  # (none)

  # builtins:
  # echo

  # - output to stderr, not stdout
  # - be explicit for clarity
  echo "Error: $@" 1>&2

  _eko_iod "#- _show_error -#"

  exit 1
}

function _show_help()
{
  _eko_iod "#+ _show_help +#"

  # functions:
  # _eko_iod

  # variables:
  # (none)

  # binaries:
  # (none)

  # builtins:
  # echo

  echo "Provide 0 or more parameters

Optional parameters:
  -a, --all        Perform specified action on all available backlight types
  -b, --backlight  Select a specific backlight type to use
  -l, --list       Display a list of available backlight types
  -q, --quiet      Limit what's displayed to error messages & this help text
  -t, --test       Test backlight type by ramping up brightness from 0% to 100%
  *[0-9]*          Desired brightness. Details below
  -d, --debug      Display debugging information (function names/entry/exit)
  -v, --verbose    Display verbose information (variable names/contents)
  -?, -h, --help   Display this help text, useful as it is

Brightness details:
  Brightness can be specified as an absolute or relative value, be it a raw
  numeric or percentage. The specification is quite flexible. Out of range
  values are silently restricted to the system's minimum & maximum. The
  following examples are all valid: 1% -33 %2+ 45+
  Numerics are mandatory. The modifiers \"%\" \"+\" \"-\" are optional & may be
  present in any order.

Note:
  If an option is specified multiple times, the last invocation is used"

  _eko_iod "#- _show_help -#"

  exit 0
}

#- function definitions here -#

#+ start here +#

# functions:
# _backlight_types_blacklist
# _backlight_types_discover
# _backlight_types_display
# _backlight_types_prioritise
# _parse_parameters

# variables:
# @
# _THIS_BACKLIGHT_TYPE

# binaries:
# (none)

# builtins:
# (none)

_parse_parameters "$@"

# - if a backlight override wasn't specified, discover what's available
# - "-z string" = true if the length of string is zero
if [[ -z $_THIS_BACKLIGHT_TYPE ]]
then
  _backlight_types_discover

  _backlight_types_blacklist

  _backlight_types_prioritise
fi

_backlight_types_display

#- start here -#

#- marker eof -#
exit 0

# NOTE: (related directly to /sys/class/backlight/ stuff)
#       (use this when exploring things later)
# - to see the different behaviour of "acpi_video0" & "intel_backlight", one
#   can force the display off & on manually from an ssh session thusly:
#    - DISPLAY=:0 XAUTHORITY=/home/erik/.Xauthority xset dpms force off
#    - DISPLAY=:0 XAUTHORITY=/home/erik/.Xauthority xset dpms force on
# - conclusion: don't change brightness settings when the display is off

# NOTE: (time: later)

# - brightness was set to 50% on all machines while display on

# - Asus EeePC 1001P (carbon.elements.lan) display on
#   Backlight type: intel_backlight (settings: 63 63 125)
#   Backlight type: acpi_video0 (settings: 8 8 15)
# - Asus EeePC 1001P (carbon.elements.lan) display off
#   Backlight type: intel_backlight (settings: 0 63 125)
#   Backlight type: acpi_video0 (settings: 0 0 15)
# - Asus EeePC 1001P (carbon.elements.lan) display on
#   Backlight type: intel_backlight (settings: 63 63 125)
# ! pass: restored to 50%
#   Backlight type: acpi_video0 (settings: 8 8 15)
# ! pass: restored to 50%

# - Asus EeePC 1215N (helium.elements.lan) display on
#   Backlight type: intel_backlight (settings: 5742 5742 11484)
#   Backlight type: acpi_video0 (settings: 5 5 10)
# - Asus EeePC 1215N (helium.elements.lan) display off
#   Backlight type: intel_backlight (settings: 0 5742 11484)
#   Backlight type: acpi_video0 (settings: 0 0 10)
# - Asus EeePC 1215N (helium.elements.lan) display on
#   Backlight type: intel_backlight (settings: 5742 5742 11484)
# ! pass: restored to 50%
#   Backlight type: acpi_video0 (settings: 5 5 10)
# ! pass: restored to 50%

# - Lenovo IdeaPad G70-80 80FF (nitrogen.elements.lan) display on
#   Backlight type: intel_backlight (settings: 469 469 937)
# - Lenovo IdeaPad G70-80 80FF (nitrogen.elements.lan) display off
#   Backlight type: intel_backlight (settings: 0 469 937)
# - Lenovo IdeaPad G70-80 80FF (nitrogen.elements.lan) display on
#   Backlight type: intel_backlight (settings: 469 469 937)
# ! pass: restored to 50%

# - brightness was changed from 50% to 33% on all machines while display off

# - Asus EeePC 1001P (carbon.elements.lan) display off
#   Backlight type: intel_backlight (settings: 0 41 125)
#   Backlight type: acpi_video0 (settings: 5 5 15)
# - Asus EeePC 1001P (carbon.elements.lan) display on
#   Backlight type: intel_backlight (settings: 41 41 125)
# ! pass: restored to 33%
#   Backlight type: acpi_video0 (settings: 8 8 15)
# ? fail: restored to 50%

# - Asus EeePC 1215N (helium.elements.lan) display off
#   Backlight type: intel_backlight (settings: 0 3790 11484)
#   Backlight type: acpi_video0 (settings: 3 3 10)
# - Asus EeePC 1215N (helium.elements.lan) display on
#   Backlight type: intel_backlight (settings: 3790 3790 11484)
# ! pass: restored to 33%
#   Backlight type: acpi_video0 (settings: 5 5 10)
# ? fail: restored to 50%

# - Lenovo IdeaPad G70-80 80FF (nitrogen.elements.lan) display off
#   Backlight type: intel_backlight (settings: 0 309 937)
# - Lenovo IdeaPad G70-80 80FF (nitrogen.elements.lan) display on
#   Backlight type: intel_backlight (settings: 469 469 937)
# ? fail: restored to 50%

# NOTE:
# * info from "grep 'model name' /proc/cpuinfo" & "lspci | grep VGA"
# - Packard Bell dot ZG5
#   - cpu: Atom N270 (machine not currently available for verification)
#   - video: integrated
#   1 - bootloader config + unknown
#     - intel_backlight (? - ?) * NOTE: (from old notes) does nothing *
# - Asus EeePC 1001P (carbon.elements.lan)
#   - cpu: Intel(R) Atom(TM) CPU N450 @ 1.66GHz
#   - video: integrated (something with i915)
#   - video: 00:02.0 VGA compatible controller: Intel Corporation Atom Processor D4xx/D5xx/N4xx/N5xx Integrated Graphics Controller
#   1 - /boot/extlinux/extlinux.conf + no acpi_* settings
#     - acpi_video0 (0 - 15) (fully functional) (see #4 below)
#     - intel_backlight (0 - 125) (fully functional)
#     - no audio. is this related?
#   2 - /boot/extlinux/extlinux.conf + acpi_backlight=vendor
#     - intel_backlight (0 - 125) (fully functional)
#     - no audio. is this related?
#   3 - /boot/extlinux/extlinux.conf + acpi_backlight=vendor + acpi_osi=Linux
#     - eeepc (0 - 15) (silently non-functional)
#     - intel_backlight (0 - 125) (fully functional)
#     - audio works. definitely related
#   4 - /boot/extlinux/extlinux.conf + acpi_osi=Linux
#     - acpi_video0 (0 - 15) (silently non-functional) (see #1 above)
#     - intel_backlight (0 - 125) (fully functional)
#     - audio works. definitely related
# - Asus EeePC 1215N (helium.elements.lan)
#   - cpu: Intel(R) Atom(TM) CPU D525 @ 1.80GHz
#   - video: integrated (something with i915)
#   - video: 00:02.0 VGA compatible controller: Intel Corporation Atom Processor D4xx/D5xx/N4xx/N5xx Integrated Graphics Controller (rev 02)
#   - video: 04:00.0 VGA compatible controller: NVIDIA Corporation GT218 [ION 2] (rev a2)
#   1 - /boot/extlinux/extlinux.conf + no acpi_* settings
#     - acpi_video0 (0 - 10) (fully functional) (see #4 below)
#     - intel_backlight (0 - 11484) (fully functional)
#   2 - /boot/extlinux/extlinux.conf + acpi_backlight=vendor
#     - eeepc-wmi (0 - 11) (silently non-functional)
#     - intel_backlight (0 - 11484) (fully functional)
#   3 - /boot/extlinux/extlinux.conf + acpi_backlight=vendor + acpi_osi=Linux
#     - eeepc (2826 - 15) (silently non-functional) * out of range *
#     - intel_backlight (0 - 11484) (fully functional)
#   4 - /boot/extlinux/extlinux.conf + acpi_osi=Linux
#     - acpi_video0 (0 - 10) (silently non-functional) (see #1 above)
#     - intel_backlight (0 - 11484) (fully functional)
# - Lenovo IdeaPad G70-80 80FF (nitrogen.elements.lan)
#   - cpu: Intel(R) Celeron(R) 3205U @ 1.50GHz
#   - video: integrated (something with i915)
#   - video: 00:02.0 VGA compatible controller: Intel Corporation HD Graphics (rev 08)
#   1 - /boot/extlinux/extlinux.conf + no acpi_* settings
#     - intel_backlight (0 - 937) (fully functional)
#   2 - /boot/extlinux/extlinux.conf + acpi_backlight=vendor
#     - ideapad (0 - 21) (silently non-functional)
#     - intel_backlight (0 - 937) (fully functional)
#   3 - /boot/extlinux/extlinux.conf + acpi_backlight=vendor + acpi_osi=Linux
#     - ideapad (0 - 21) (silently non-functional)
#     - intel_backlight (0 - 937) (fully functional)
#   4 - /boot/extlinux/extlinux.conf + acpi_osi=Linux
#     - intel_backlight (0 - 937) (fully functional)
# - Lenovo ThinkPad T43
#   - cpu: Pentium M (incomplete info. not needed?)
#   - video: AMD Radeon
#   1 - bootloader config + no acpi_* settings
#     - thinkpad_screen (0 - 7) (fully functional)
# - Lenovo ThinkPad T420
#   - cpu: Intel(R) Core(TM) i5-2520M CPU @ 2.50GHz
#   - video: integrated (something with i915)
#   1 - bootloader config + no acpi_* settings
#     - acpi_video0 (0 - 15) (fully functional)
#     - intel_backlight (0 - 4437) (fully functional)

# NOTE:
# 1 - /boot/extlinux/extlinux.conf.noacpi
#     - no acpi_* settings
# 2 - /boot/extlinux/extlinux.conf.acpi_backlight
#     - acpi_backlight=vendor
# 3 - /boot/extlinux/extlinux.conf.acpi_backlight.acpi_osi
#     - acpi_backlight=vendor acpi_osi=Linux
# 4 - /boot/extlinux/extlinux.conf.acpi_osi
#     - acpi_osi=Linux
# * - /boot/extlinux/extlinux.conf
#     - hardlinked destination
# ^ currently using #4 on all local machines (desktop/notebook/netbook class)

# summary:
# - intel_backlight # preferred (max: 125, 937, 4437, 11484)
# - acpi_video0     # coarse, *sometimes* functional (max: 10, 15) (see above)
# - thinkpad_screen # coarse, functional (max: 7)
# - eeepc           # non-functional on Asus EeePC 1215N (max: 15) (see above)
# - eeepc-wmi       # non-functional on Asus EeePC 1215N (max: 11)
# - ideapad         # non-functional on Lenovo IdeaPad G70-80 80FF (max: 21)

# from old notes:
# - Atom N270 - integrated video
#   - 00:02.0 VGA compatible controller: Intel Corporation Mobile 945GSE Express Integrated Graphics Controller (rev 03)
#   - acer-wmi (0 - 9)
#   - intel_backlight (0 - 15625)
# - Atom N450 - integrated video
#   - 00:02.0 VGA compatible controller: Intel Corporation Atom Processor D4xx/D5xx/N4xx/N5xx Integrated Graphics Controller
#   - eeepc (0 - 15)
#   - intel_backlight (0 - 125)
# - Atom D525 - integrated video
#   - 00:02.0 VGA compatible controller: Intel Corporation Atom Processor D4xx/D5xx/N4xx/N5xx Integrated Graphics Controller (rev 02)
#   - acpi_video0 (0 - 10) (without acpi tweaks)
#   - eeepc (0 - 15)
#   - intel_backlight (0 - 11484)
# - Celeron 3205U - integrated video
#   - 00:02.0 VGA compatible controller: Intel Corporation Broadwell-U Integrated Graphics (rev 08)
#   - intel_backlight (0 - 937)
