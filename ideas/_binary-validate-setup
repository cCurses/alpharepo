#!/bin/bash
#+ marker sof +#

function _binary_validate_setup()
{
  #+ _binary_validate_setup +#

  # variables:
  # _BINARY_HELP
  # _BINARY_NAME
  # _BINARY_OPTION
  # _OPTIONS_RSYNC (rsync options, not script options)

  # binaries:
  # rsync
  # ssh

  # NOTE:
  # - rather than test a given binary's version in hopes of figuring out which
  #   features it supports, test its supported feature set directly. not only
  #   is this much simpler to do, it's possible to test only those features
  #   that are explicitly used in the script
  # - how? get the binary to dump its embedded help text & parse the result
  # - this can be used as a dual test. no help text = no binary, otherwise
  #   parse the help text for descriptions of specific features

  #+ rsync +#
  # - "rsync --help". stdout
  #   "--archive"
  #   "--delete"
  #   "--dry-run"
  #   "--force"
  #   "--fuzzy"
  #   "--hard-links"
  #   "--no-motd"
  #   "--partial"
  #   "--progress"
  #   "--sparse"
  #   "--verbose"

  _BINARY_NAME=rsync
  _BINARY_HELP=$(echo $($_BINARY_NAME --help 2>&1))
  if [[ $_BINARY_HELP =~ "command not found" ]]
  then
    echo "required binary \"$_BINARY_NAME\" not found"
    exit 1
  else
    echo " required binary \"$_BINARY_NAME\": found"

    # - quietly build up the option list that's needed. add only those options
    #   that are supported. this will allow the script to be used with
    #   absolutely *ancient* versions of rsync with minimal modifications

    # - this option absolutely *must* be supported, hence the different handler
    _BINARY_OPTION=--archive
    if [[ " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
    then
      _OPTIONS_RSYNC=$_BINARY_OPTION
    else
      echo \""$_BINARY_NAME\" does not support \"$_BINARY_OPTION\""
      exit 1
    fi

    # do NOT use "--delete-excluded" (you have been warned)
    _BINARY_OPTION=--delete
    if [[ " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
    then
      _OPTIONS_RSYNC+=" "$_BINARY_OPTION
    fi

    if [[ $_ACTION == verify ]]
    then
      _BINARY_OPTION=--dry-run
      if [[ " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
      then
        _OPTIONS_RSYNC+=" "$_BINARY_OPTION
      fi
    fi

    _BINARY_OPTION=--force
    if [[ " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
    then
      _OPTIONS_RSYNC+=" "$_BINARY_OPTION
    fi

    _BINARY_OPTION=--fuzzy
    if [[ " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
    then
      _OPTIONS_RSYNC+=" "$_BINARY_OPTION
    fi

    _BINARY_OPTION=--hard-links
    if [[ " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
    then
      _OPTIONS_RSYNC+=" "$_BINARY_OPTION
    fi

    _BINARY_OPTION=--no-motd
    if [[ " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
    then
      _OPTIONS_RSYNC+=" "$_BINARY_OPTION
    fi

    _BINARY_OPTION=--partial
    if [[ " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
    then
      _OPTIONS_RSYNC+=" "$_BINARY_OPTION
    fi

    _BINARY_OPTION=--progress
    if [[ " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
    then
      _OPTIONS_RSYNC+=" "$_BINARY_OPTION
    fi

    _BINARY_OPTION=--sparse
    if [[ " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
    then
      _OPTIONS_RSYNC+=" "$_BINARY_OPTION
    fi

    _BINARY_OPTION=--verbose
    if [[ " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
    then
      _OPTIONS_RSYNC+=" "$_BINARY_OPTION
    fi
  fi
  #- rsync -#

  # NOTE:
  # - this host uses rsync directly (as opposed to rsync over ssh), so the ssh
  #   test itself is unnecessary
  if [[ $_MIRROR != ftp.slackware.com ]]
  then
    #+ ssh +#
    # - naturally, there has to be ONE troublemaker. meh
    # - "ssh --help". stderr. anything not a valid option spits out help text.
    #   technically speaking, none of "--help", "-help", "-h", "-?" are
    #   supported. they all provide useful help text, though *shrug*
    # - beat the silly thing into submission:
    # - "ssh --help 2>&1". stdout

    # NOTE:
    # - no option testing is performed. it's assumed that you have a properly
    #   configured system in place already

    _BINARY_NAME=ssh
    _BINARY_HELP=$(echo $($_BINARY_NAME --help 2>&1))
    if [[ $_BINARY_HELP =~ "command not found" ]]
    then
      echo "required binary \"$_BINARY_NAME\" not found"
      exit 1
    else
      echo "   required binary \"$_BINARY_NAME\": found"
    fi
    #- ssh -#
  fi

  #- _binary_validate_setup -#
}

# - we start with (or without) this:
_ACTION=verify

# - validate the existence & required options of system binaries
# - while we're at it, set up the options for the various binaries
_binary_validate_setup

echo "         \$_OPTIONS_RSYNC: \"$_OPTIONS_RSYNC\""

#- marker eof -#
exit 0
