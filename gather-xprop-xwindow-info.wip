#!/bin/bash
#+ marker sof +#

# gather-xprop-xwindow-info v2019.10.27

# Copyright (C) 2019
# Erik Jan Tromp <alphageek@slackware.com>
# Licensed under the GPL v2

# concept:
# - as the name suggests: gather xprop & xwininfo info on all known windows
# ^ root window & every window identified by its Window ID
# - possibly output to a distinct file using various environment variables

# NOTE:
# - additional information acquired from:
#   https://standards.freedesktop.org/wm-spec/wm-spec-latest.html

# 2019-10-27
# - different approach. gather everything, display only what's of interest
# - #'d out all non-essentials. leaving them in place "just in case"
# 2019-10-25
# (pending)
# - obfuscate potentially sensitive information from the gathered information
# - I just have to figure out *how* (done as of 2019-10-27)
# - do too little & it's basically a wasted effort
# - do too much & the script is rendered pointless
# ^ for now, all I can suggest is to run this script in a clean environment

# - coding begins almost from scratch. copy-pasted pertinent routines from
#   "move-window". the following functions were retained with little or no
#   modification:
#   "function _binary_validate"
##   "function _eko_iod"
#   "function _eko_pv"
#   "function _get_net_client_list_window"
#   "function _parse_parameters"
#   "function _show_error"
#   "function _show_help"

#+ setup here +#

# (none)

#- setup here -#

#+ function definitions here +#

# ORDER:
# - before calling _parse_parameters, but otherwise alphabetical

function _binary_validate()
{
#  _eko_iod "#+ _binary_validate +#"

  # functions:
#  # _eko_iod
  # _eko_pv
  # _show_error

  # variables:
  # _BINARY_HELP
  # _BINARY_NAME
  # _BINARY_OPTION

  # binaries:
  # sed
  # xprop
  # xwininfo

  # builtins:
  # echo

  # NOTE:
  # - rather than test a given binary's version in hopes of figuring out which
  #   features it supports, test its supported feature set directly. not only
  #   is this much simpler to do, it's possible to test only those features
  #   that are explicitly used in the script
  # - how? get the binary to dump its embedded help text & parse the result
  # - this can be used as a dual test. no help text = no binary, otherwise
  #   parse the help text for descriptions of specific features

  # NOTE:
  # - be explicit, use long form options when available

  #+ sed +#
  # - "sed --help". stdout
  #   "--expression=script" (no "=" required) (use "=" for uniformity)

  _BINARY_NAME=sed
  _BINARY_HELP=$(echo $($_BINARY_NAME --help 2>&1))
  if [[ $_BINARY_HELP =~ "command not found" ]]
  then
    _show_error "required binary \"$_BINARY_NAME\" not found"
  fi

  _BINARY_OPTION=--expression=script
  if [[ ! " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
  then
    _show_error \""$_BINARY_NAME\" does not support \"$_BINARY_OPTION\""
  fi
  #- sed -#

  #+ xprop +#
  # - "xprop -help". stderr
  # - "xprop -help 2>&1". stdout
  #   "-id id" (test only for "-id") (no long form)
  #   "-root" (no long form. no other options)

  _BINARY_NAME=xprop
  _BINARY_HELP=$(echo $($_BINARY_NAME -help 2>&1))
  if [[ $_BINARY_HELP =~ "command not found" ]]
  then
    _show_error "required binary \"$_BINARY_NAME\" not found"
  fi

  if [[ " $_BINARY_HELP " =~ "unable to open display" ]]
  then
    _show_error "unable to determine \$DISPLAY &/or \$XAUTHORITY"
  fi

  _BINARY_OPTION=-id
  if [[ ! " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
  then
    _show_error \""$_BINARY_NAME\" does not support \"$_BINARY_OPTION\""
  fi

  _BINARY_OPTION=-root
  if [[ ! " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
  then
    _show_error \""$_BINARY_NAME\" does not support \"$_BINARY_OPTION\""
  fi
  #- xprop -#

  #+ xwininfo +#
  # - "xwininfo -help". stderr
  # - "xwininfo -help 2>&1 ". stdout
  #   "-id windowid" (test only for "-id") (no long form)

  _BINARY_NAME=xwininfo
  _BINARY_HELP=$(echo $($_BINARY_NAME -help 2>&1))
  if [[ $_BINARY_HELP =~ "command not found" ]]
  then
    _show_error "required binary \"$_BINARY_NAME\" not found"
  fi

  _BINARY_OPTION=-id
  if [[ ! " $_BINARY_HELP " =~ " $_BINARY_OPTION " ]]
  then
    _show_error \""$_BINARY_NAME\" does not support \"$_BINARY_OPTION\""
  fi
  #- xwininfo -#

#  _eko_iod "#- _binary_validate -#"
}

function _eko_iod()
{
  #+ _eko_iod +#

  # functions:
  # (none)

  # variables:
  # #
  # @
  # FUNCNAME (single dimension indexed array)
  # _BOOLEAN_DEBUG

  # binaries:
  # (none)

  # builtins:
  # echo
  # printf

  # NOTE:
  # - why "$(( ${#FUNCNAME[@]} - 3 ))"? to account for main, parent, current
  # - pay special attention to the "*" in "%*s". it's part of the magic

  if $_BOOLEAN_DEBUG
  then
    # - fast & fancy indenting/"outdenting"
    # - $((expression))
    # - ${#parameter}
    printf "%*s" $(( ${#FUNCNAME[@]} - 3 ))
    echo "$@"
  fi

  #- _eko_iod -#
}

function _eko_pv()
{
  #+ _eko_pv +#

  # functions:
  # (none)

  # variables:
  # 1
  # @
  # _BOOLEAN_VERBOSE

  # binaries:
  # (none)

  # builtins:
  # echo
  # printf

  # NOTE:
  # - why "%23s "? to simplify setting column width in verbose reports. a
  #   single change here affects the output globally
  # - unformatted (non-columnized) output is now supported. simply pass "" as
  #   the first parameter

  if $_BOOLEAN_VERBOSE
  then
    # - "-n string" = true if the length of string is non-zero
    if [[ -n $1 ]]
    then
      printf "%23s " "$1"
    fi
    shift
    echo "$@"
  fi

  #- _eko_pv -#
}

function _get_net_client_list_window()
{
#  _eko_iod "#+ _get_net_client_list_window +#"

  # functions:
#  # _eko_iod
  # _eko_pv

  # variables:
  # _NET_CLIENT_LIST_WINDOW
  # _OUTPUT_XPROP_ROOT

  # binaries:
  # sed

  # builtins:
  # echo

  # NET:
  # - _NET_CLIENT_LIST, WINDOW[]/32

  # "_NET_CLIENT_LIST(WINDOW): window id # "
  # "0xe00008, "
  # etc, etc
  # "0x36007a2"

  _NET_CLIENT_LIST_WINDOW=$(echo "$_OUTPUT_XPROP_ROOT" | sed --expression='/^_NET_CLIENT_LIST(WINDOW): window id # /!d ; /\(.* # \|,\)/ s///g')

#  _eko_pv \$_NET_CLIENT_LIST_WINDOW: \""$_NET_CLIENT_LIST_WINDOW\""

#  _eko_iod "#- _get_net_client_list_window -#"
}

function _parse_parameters()
{
  #+ _parse_parameters +#

  # functions:
  # _binary_validate
#  # _eko_iod
  # _eko_pv
  # _get_net_client_list_window
  # _show_error
  # _show_help

  # variables:
  # #
  # 1
  # _BOOLEAN_DEBUG
  # _BOOLEAN_GATHER
  # _BOOLEAN_VERBOSE
  # _NET_CLIENT_LIST_WINDOW
  # _OPTION_WINDOW_ID
  # _OUTPUT_SORTED
  # _OUTPUT_XPROP_ID
  # _OUTPUT_XPROP_ROOT
  # _OUTPUT_XWININFO_ID
  # _OUTPUT_XWININFO_ROOT

  # binaries:
  # xprop
  # xwininfo

  # builtins:
  # (none)

  # NOTE:
  # - boolean variables are proper toggles

  #+ parameter defaults +#

  _BOOLEAN_DEBUG=true   # display
  _BOOLEAN_GATHER=false # action
  _BOOLEAN_VERBOSE=true # display

  #- parameter defaults -#

  while [[ $# -gt 0 ]]
  do
    case $1 in
      ( -g \
      | --gather )
        if $_BOOLEAN_GATHER
        then
          _BOOLEAN_GATHER=false
        else
          _BOOLEAN_GATHER=true
        fi
      ;;
      ( "-?" \
      | -h \
      | --help ) # -? must be "-?" or it matches "-<any single character>"
        _show_help
      ;;
      ( -* )
        _show_error "invalid option \"$1\" specified"
      ;;
      ( * )
        _show_error "invalid parameter \"$1\" specified"
      ;;
    esac
    shift
  done

  #- _parse_parameters -#

  # - technically in the wrong spot, but it's a chicken or egg scenario
#  _eko_iod "#+ _parse_parameters +#"

  # - show help
  if ! $_BOOLEAN_GATHER
  then
    _show_help
  fi

  # - validate the existence & required options of system binaries
  _binary_validate

  #+ parameter settings (in (mostly) proper order of operation) +#

#  _eko_pv \$_BOOLEAN_DEBUG: \""$_BOOLEAN_DEBUG\""
#  _eko_pv \$_BOOLEAN_GATHER: \""$_BOOLEAN_GATHER\""
#  _eko_pv \$_BOOLEAN_VERBOSE: \""$_BOOLEAN_VERBOSE\""

  #- parameter settings (in (mostly) proper order of operation) -#

  # - and so it begins

# - too much info returned. potentially sensitive stuff included. nope
if [[ 0 == 1 ]]
then

  # - acquire "-root" via xwininfo & xprop (specifically in that order)
  # - acquire _NET_CLIENT_LIST_WINDOW & loop through each entity (same ordering)

  _eko_pv "" ""

  _OUTPUT_XWININFO_ROOT=$(xwininfo -root)
#  _eko_pv \$_OUTPUT_XWININFO_ROOT: \""$_OUTPUT_XWININFO_ROOT\""
  _eko_pv \$_OUTPUT_XWININFO_ROOT: ""
  _eko_pv "" \""$_OUTPUT_XWININFO_ROOT\""

  _eko_pv "" ""

  _OUTPUT_XPROP_ROOT=$(xprop -root)
#  _eko_pv \$_OUTPUT_XPROP_ROOT: \""$_OUTPUT_XPROP_ROOT\""
  _eko_pv \$_OUTPUT_XPROP_ROOT: ""
  _eko_pv "" \""$_OUTPUT_XPROP_ROOT\""

  _eko_pv "" ""

  # - get full list of Window IDs
  # - this must follow the setting of $_OUTPUT_XPROP_ROOT directly above
  _get_net_client_list_window

  for _OPTION_WINDOW_ID in $_NET_CLIENT_LIST_WINDOW
  do
    _eko_pv "" ""
    _eko_pv \$_OPTION_WINDOW_ID: \""$_OPTION_WINDOW_ID\""
    _OUTPUT_XWININFO_ID=$(xwininfo -id $_OPTION_WINDOW_ID)
#    _eko_pv \$_OUTPUT_XWININFO_ID: \""$_OUTPUT_XWININFO_ID\""
    _eko_pv \$_OUTPUT_XWININFO_ID: ""
    _eko_pv "" \""$_OUTPUT_XWININFO_ID\""
  done

  for _OPTION_WINDOW_ID in $_NET_CLIENT_LIST_WINDOW
  do
    _eko_pv "" ""
    _eko_pv \$_OPTION_WINDOW_ID: \""$_OPTION_WINDOW_ID\""
    _OUTPUT_XPROP_ID=$(xprop -id $_OPTION_WINDOW_ID)
#    _eko_pv \$_OUTPUT_XPROP_ID: \""$_OUTPUT_XPROP_ID\""
    _eko_pv \$_OUTPUT_XPROP_ID: ""
    _eko_pv "" \""$_OUTPUT_XPROP_ID\""
  done

fi

# - display only what's required
if [[ 1 == 1 ]]
then

# NOTE:
# - I'm only interested in the formatting of the following (for now):
#   _NET_VIRTUAL_ROOTS
#   _NET_WM_BYPASS_COMPOSITOR
#   _NET_WM_HANDLED_ICONS

  # - acquire "xprop -root"
  # - acquire _NET_CLIENT_LIST_WINDOW & loop through each entity
  # - deliberately using "echo" instead of "_eko_pv" below so the output can
  #   be fed to "grep" with no trouble

  _OUTPUT_XPROP_ROOT=$(xprop -root)

  echo "#+ xprop -root +#"
  _OUTPUT_SORTED=$(echo "$_OUTPUT_XPROP_ROOT" \
  | egrep \
^_NET_VIRTUAL_ROOTS)

  # - we only need a single example of each match
  # - "-n string" = true if the length of string is non-zero
  if [[ -n $_OUTPUT_SORTED ]]
  then
    _OUTPUT_SORTED=$(echo "$_OUTPUT_SORTED" | sort -u)
    echo "$_OUTPUT_SORTED"
  fi
  echo "#- xprop -root -#"

# - test pattern for above. it works
#^"(_NET_ACTIVE_WINDOW|_NET_CURRENT_DESKTOP)")

  # - get full list of Window IDs
  # - this must follow the setting of $_OUTPUT_XPROP_ROOT directly above
  _get_net_client_list_window

  echo "#+ xprop -id 0xDEADF00D +#"
  _OUTPUT_SORTED=$(for _OPTION_WINDOW_ID in $_NET_CLIENT_LIST_WINDOW
  do
    echo "$_OPTION_WINDOW_ID"

    _OUTPUT_XPROP_ID=$(xprop -id $_OPTION_WINDOW_ID)
    echo "$_OUTPUT_XPROP_ID"
  done \
  | egrep \
^"(_NET_WM_BYPASS_COMPOSITOR|_NET_WM_HANDLED_ICONS)")

  # - we only need a single example of each match
  # - "-n string" = true if the length of string is non-zero
  if [[ -n $_OUTPUT_SORTED ]]
  then
    _OUTPUT_SORTED=$(echo "$_OUTPUT_SORTED" | sort -u)
    echo "$_OUTPUT_SORTED"
  fi
  echo "#- xprop -id 0xDEADF00D -#"

fi

# - test pattern for above. it works
#^"(_NET_WM_NAME|_NET_WM_PID)")

  # - and so it ends (so far)

#  _eko_iod "#- _parse_parameters -#"
}

function _show_error()
{
#  _eko_iod "#+ _show_error +#"

  # functions:
#  # _eko_iod

  # variables:
  # @

  # binaries:
  # (none)

  # builtins:
  # echo

  # - output to stderr, not stdout
  # - be explicit for clarity
  echo "Error: $@" 1>&2

#  _eko_iod "#- _show_error -#"

  exit 1
}

function _show_help()
{
#  _eko_iod "#+ _show_help +#"

  # functions:
#  # _eko_iod

  # variables:
  # (none)

  # binaries:
  # (none)

  # builtins:
  # echo

  echo "
Provide 1 parameter

Mandatory parameter:

  -g, --gather    Gather & display only specific information via \""xwininfo\""
                    & \""xprop\""

Optional parameter:

  -?, -h, --help  Display this help text, useful as it is

Note:
  Information gathered *may* contain sensitive information, so run this script
  in a clean environment. Update for 2019-10-27: Only specific information is
  displayed, so there should be no concern about sensitive information
"

#  _eko_iod "#- _show_help -#"

  exit 0
}

#- function definitions here -#

#+ start here +#

# functions:
# _parse_parameters

# variables:
# @

# binaries:
# (none)

# builtins:
# (none)

_parse_parameters "$@"

#- start here -#

#- marker eof -#
exit 0

# - indented with tab = script supports
# - # = xprop -root
# - ## = xprop -id 0xDEADF00D

# - root window properties (& related messages)

	# _NET_ACTIVE_WINDOW, WINDOW/32
	# _NET_CLIENT_LIST, WINDOW[]/32
	# _NET_CLIENT_LIST_STACKING, WINDOW[]/32
	# _NET_CURRENT_DESKTOP desktop, CARDINAL/32
	# _NET_DESKTOP_GEOMETRY width, height, CARDINAL[2]/32
	# _NET_DESKTOP_LAYOUT, orientation, columns, rows, starting_corner CARDINAL[4]/32
	#define _NET_WM_ORIENTATION_HORZ 0
	#define _NET_WM_ORIENTATION_VERT 1
	#define _NET_WM_TOPLEFT     0
	#define _NET_WM_TOPRIGHT    1
	#define _NET_WM_BOTTOMRIGHT 2
	#define _NET_WM_BOTTOMLEFT  3
	# _NET_DESKTOP_NAMES, UTF8_STRING[]
	# _NET_DESKTOP_VIEWPORT x, y, CARDINAL[][2]/32
	# _NET_NUMBER_OF_DESKTOPS, CARDINAL/32
	# _NET_SHOWING_DESKTOP desktop, CARDINAL/32
	# _NET_SUPPORTED, ATOM[]/32
	# _NET_SUPPORTING_WM_CHECK, WINDOW/32
# _NET_VIRTUAL_ROOTS, WINDOW[]/32
	# _NET_WORKAREA, x, y, width, height CARDINAL[][4]/32

# - other root window messages

# _NET_CLOSE_WINDOW
# _NET_MOVERESIZE_WINDOW
# _NET_REQUEST_FRAME_EXTENTS
# _NET_RESTACK_WINDOW

# _NET_WM_MOVERESIZE
#define _NET_WM_MOVERESIZE_SIZE_TOPLEFT      0
#define _NET_WM_MOVERESIZE_SIZE_TOP          1
#define _NET_WM_MOVERESIZE_SIZE_TOPRIGHT     2
#define _NET_WM_MOVERESIZE_SIZE_RIGHT        3
#define _NET_WM_MOVERESIZE_SIZE_BOTTOMRIGHT  4
#define _NET_WM_MOVERESIZE_SIZE_BOTTOM       5
#define _NET_WM_MOVERESIZE_SIZE_BOTTOMLEFT   6
#define _NET_WM_MOVERESIZE_SIZE_LEFT         7
#define _NET_WM_MOVERESIZE_MOVE              8   /* movement only */
#define _NET_WM_MOVERESIZE_SIZE_KEYBOARD     9   /* size via keyboard */
#define _NET_WM_MOVERESIZE_MOVE_KEYBOARD    10   /* move via keyboard */
#define _NET_WM_MOVERESIZE_CANCEL           11   /* cancel operation */

# - application window properties

	## _NET_FRAME_EXTENTS, left, right, top, bottom, CARDINAL[4]/32
	## _NET_WM_ALLOWED_ACTIONS, ATOM[] (12 possibilities)
	## _NET_WM_ACTION_ABOVE, ATOM
	## _NET_WM_ACTION_BELOW, ATOM
	## _NET_WM_ACTION_CHANGE_DESKTOP, ATOM
	## _NET_WM_ACTION_CLOSE, ATOM
	## _NET_WM_ACTION_FULLSCREEN, ATOM
	## _NET_WM_ACTION_MAXIMIZE_HORZ, ATOM
	## _NET_WM_ACTION_MAXIMIZE_VERT, ATOM
	## _NET_WM_ACTION_MINIMIZE, ATOM
	## _NET_WM_ACTION_MOVE, ATOM
	## _NET_WM_ACTION_RESIZE, ATOM
	## _NET_WM_ACTION_SHADE, ATOM
	## _NET_WM_ACTION_STICK, ATOM
## _NET_WM_BYPASS_COMPOSITOR, CARDINAL/32
	## _NET_WM_DESKTOP desktop, CARDINAL/32
## _NET_WM_HANDLED_ICONS
	## _NET_WM_ICON_GEOMETRY, x, y, width, height, CARDINAL[4]/32
	## _NET_WM_ICON_NAME, UTF8_STRING
	## _NET_WM_NAME, UTF8_STRING
	## _NET_WM_OPAQUE_REGION, x, y, width, height, CARDINAL[][4]/32
	## _NET_WM_PID CARDINAL/32
	## _NET_WM_STATE, ATOM[] (13 possibilities)
	## _NET_WM_STATE_ABOVE, ATOM
	## _NET_WM_STATE_BELOW, ATOM
	## _NET_WM_STATE_DEMANDS_ATTENTION, ATOM
	## _NET_WM_STATE_FOCUSED, ATOM
	## _NET_WM_STATE_FULLSCREEN, ATOM
	## _NET_WM_STATE_HIDDEN, ATOM
	## _NET_WM_STATE_MAXIMIZED_HORZ, ATOM
	## _NET_WM_STATE_MAXIMIZED_VERT, ATOM
	## _NET_WM_STATE_MODAL, ATOM
	## _NET_WM_STATE_SHADED, ATOM
	## _NET_WM_STATE_SKIP_PAGER, ATOM
	## _NET_WM_STATE_SKIP_TASKBAR, ATOM
	## _NET_WM_STATE_STICKY, ATOM
	## _NET_WM_STRUT, left, right, top, bottom, CARDINAL[4]/32
	## _NET_WM_STRUT_PARTIAL, left, right, top, bottom, left_start_y, left_end_y, right_start_y, right_end_y, top_start_x, top_end_x, bottom_start_x, bottom_end_x,CARDINAL[12]/32
        ## _NET_WM_SYNC_REQUEST_COUNTER, ?, ?, CARDINAL[]/32 (not in the spec)
	## _NET_WM_USER_TIME CARDINAL/32
	## _NET_WM_USER_TIME_WINDOW WINDOW/32
	## _NET_WM_VISIBLE_ICON_NAME, UTF8_STRING
	## _NET_WM_VISIBLE_NAME, UTF8_STRING
	## _NET_WM_WINDOW_TYPE, ATOM[]/32 (14 possibilities)
	## _NET_WM_WINDOW_TYPE_COMBO, ATOM
	## _NET_WM_WINDOW_TYPE_DESKTOP, ATOM
	## _NET_WM_WINDOW_TYPE_DIALOG, ATOM
	## _NET_WM_WINDOW_TYPE_DND, ATOM
	## _NET_WM_WINDOW_TYPE_DOCK, ATOM
	## _NET_WM_WINDOW_TYPE_DROPDOWN_MENU, ATOM
	## _NET_WM_WINDOW_TYPE_MENU, ATOM
	## _NET_WM_WINDOW_TYPE_NORMAL, ATOM
	## _NET_WM_WINDOW_TYPE_NOTIFICATION, ATOM
	## _NET_WM_WINDOW_TYPE_POPUP_MENU, ATOM
	## _NET_WM_WINDOW_TYPE_SPLASH, ATOM
	## _NET_WM_WINDOW_TYPE_TOOLBAR, ATOM
	## _NET_WM_WINDOW_TYPE_TOOLTIP, ATOM
	## _NET_WM_WINDOW_TYPE_UTILITY, ATOM

## _NET_WM_ICON CARDINAL[][2+n]/32 (deliberately skipping this one)

# - window manager protocols (WM_PROTOCOLS)

# _NET_WM_PING
# _NET_WM_SYNC_REQUEST
# _NET_WM_FULLSCREEN_MONITORS

# - other properties

# _NET_WM_FULL_PLACEMENT

# - there's more in the spec, but let's concentrate on these first
